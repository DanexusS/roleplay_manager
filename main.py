import base64
import asyncio
import discord
import datetime
import random

from discord import FFmpegPCMAudio
from discord.ext import commands
from discord.ext.commands import MissingPermissions, MissingRole, CommandNotFound
from discord.utils import get
from discord_slash import SlashCommand
from discord_components import DiscordComponents, Button, ButtonStyle

from pafy import new

from extras import *
from consts import *
from data import db_session
from data.users import User
from data.items import Items

"""
====================================================================================================================
====================================== –†–ê–ó–î–ï–õ –° –ü–ï–†–ï–ú–ï–ù–ù–´–ú–ò –ò –ù–ê–°–¢–†–û–ô–ö–û–ô –ë–û–¢–ê ======================================
====================================================================================================================
"""

# –°–µ—Ä–≤–µ—Ä–∞ (–Ω—É–∂–Ω—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–ª—ç—à-–∫–æ–º–º–∞–Ω–¥
test_servers_id = [936293335063232672]

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ (–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞)
activity = discord.Activity(type=discord.ActivityType.listening, name="–î—Ä–µ–≤–Ω–µ—Ä—É—Å—Å–∫–∏–π —Ä–µ–π–≤")
intents = discord.Intents.default()
intents.members = True

client = commands.Bot(command_prefix=PREFIX, intents=intents, activity=activity)
slash = SlashCommand(client, sync_commands=True)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–¥
db_session.global_init(f"db/DataBase.db")
db_sess = db_session.create_session()


"""
====================================================================================================================
================================================ –†–ê–ó–î–ï–õ –° –°–û–ë–´–¢–ò–Ø–ú–ò ================================================
====================================================================================================================
"""


# –°–û–ë–´–¢–ò–ï, –ø–æ–∫–∞–∑—ã–≤–∞—é—â–µ–µ —Ç–æ, —á—Ç–æ –±–æ—Ç –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
@client.event
async def on_ready():
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É–¥–∞—á–Ω–æ–º –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
    print("–ë–æ—Ç –∑–∞–ø—É—Å—Ç–∏–ª—Å—è")

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–∞–Ω–∞–ª—É "üé∂–ì–ª–∞–≤–Ω–∞—è —Ç–µ–º–∞" –Ω–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–∞—Ö
    await channel_connection()

    # –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞
    await store_update_cycle()


# –°–û–ë–´–¢–ò–ï, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–µ–µ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–æ–∫
@client.event
async def on_button_click(interaction):
    decision_type = interaction.component.label
    message = interaction.message
    embed = message.embeds[0]

    guild = interaction.guild
    member = interaction.user
    print(decision_type)
    if "–í–∑—è—Ç—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç" in decision_type:
        difficulty = int(embed.fields[3].value.split('**')[1])
        print(difficulty)
        fight = CreateBattle(difficulty)
        await fight.start_battle(guild, member)

    if "–ê—Ç–∞–∫–æ–≤–∞—Ç—å" in decision_type:
        action = 1

    if "–£–∫—Ä—ã—Ç—å—Å—è" in decision_type:
        action = 2

    if "–õ–µ—á–∏—Ç—å—Å—è" in decision_type:
        action = 3

    if "–°–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º —Å—Ç—Ä–µ–ª—å–±—ã" in decision_type:
        action = 4

    if "–ê—Ç–∞–∫–æ–≤–∞—Ç—å" in decision_type:
        action = 5


    if "–ù–∞—á–∞—Ç—å —Ä–∞–∑–¥–∞—á—É" in decision_type:
        dealer_line = embed.fields[3].value.split("\n")[1]
        dealer_name, dealer_desc = " ".join(dealer_line.split()[1:]).split("#")
        dealer = get(guild.members, name=dealer_name, discriminator=dealer_desc)

        if member.id != dealer.id:
            return

        active_card_decks = json.load(open("game_data/active_card_decks.json", encoding="utf8"))
        active_players = json.load(open("game_data/active_players.json", encoding="utf8"))

        deck = DeckOfCards()
        await deck.shuffle()
        active_card_decks[str(message.id)] = deck.cards

        active_players_ids = list(active_players[str(message.id)].keys())

        for player in active_players_ids:
            active_players[str(message.id)][str(player)]["deck"] = await deck.take(2)

        player_id = 4 if 3 < len(active_players_ids) else 4 % len(active_players_ids)
        old_field_value = "\n".join(embed.fields[3].value.split("\n")[:4])

        embed.set_field_at(3, name="\u200b",
                           value=f"{old_field_value}\n"
                                 f"{player_id + 1}.\t{guild.get_member(int(active_players_ids[player_id]))}\n"
                                 f"–•–æ–¥ —Ä–∞—É–Ω–¥–∞: 1 –∏–∑ {len(active_players_ids)}",
                           inline=True)

        await interaction.send("–†–∞–∑–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        await message.edit(embed=embed,
                           components=[Button(style=ButtonStyle.gray, label="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –∫–∞—Ä—Ç—ã")])

        await commit_changes(active_card_decks, "game_data/active_card_decks.json")
        await commit_changes(active_players, "game_data/active_players.json")

        return

    if "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –∫–∞—Ä—Ç—ã" in decision_type:
        active_players = json.load(open("game_data/active_players.json", encoding="utf8"))
        if str(member.id) not in list(active_players[str(message.id)].keys()):
            await interaction.send(":x: –í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ —ç—Ç–æ–π –∏–≥—Ä–µ!")
            return

        player_cards = active_players[str(message.id)][str(member.id)]["deck"]
        text_cards = []
        for card_info in player_cards:
            value, suit = card_info.split(" - ")
            text_cards.append(f"{value} {client.get_emoji(playing_cards_emoji[suit])}")
        text_cards = "\t\t".join(text_cards)

        await interaction.send(f"–í–∞—à–∏ –∫–∞—Ä—Ç—ã:\n\t{text_cards}")
        return

    if "–ö—É–ø–∏—Ç—å" in decision_type:
        value_emoji = client.get_emoji(emoji['money'])
        item_name = ' '.join(decision_type.split()[1:])
        item = db_sess.query(Items).filter(Items.name == item_name).first()
        user = db_sess.query(User).filter(User.id == f"{member.id}-{guild.id}").first()

        if user.balance < item.price:
            await interaction.send(f"***–í–∞–º –Ω–µ —Ö–≤–∞—Ç–∏–ª–æ –¥–µ–Ω–µ–≥**! –í–∞—à –±–∞–ª–∞–Ω—Å: {user.balance} {value_emoji}* "
                                   f"[–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å]")
        else:
            user.balance -= item.price
            await add_item(guild, member.id, item_name)
            await interaction.send(f"*–í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ **{item_name}**! –í–∞—à –±–∞–ª–∞–Ω—Å: {user.balance} {value_emoji}* "
                                   f"[–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å]")

        db_sess.commit()
        return

    if decision_type in group_lbl_button_nation:
        id_user = f"{member.id}-{guild.id}"
        user = db_sess.query(User).filter(User.id == id_user).first()
        user.nation = decision_type

        await interaction.send(f"*–¢–µ–ø–µ—Ä—å –≤—ã –ø—Ä–µ–Ω–∞–¥–ª–µ–∂–∏—Ç–µ —Ä–∞—Å–µ **{decision_type}**!* [–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å]")
        db_sess.commit()
        return

    if decision_type in group_lbl_button_origin:
        id_user = f"{member.id}-{guild.id}"
        user = db_sess.query(User).filter(User.id == id_user).first()
        user.origin = decision_type

        await interaction.send(f"*–¢–µ–ø–µ—Ä—å –≤—ã –∏–∑ \"**{decision_type}**\"!* [–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å]")
        db_sess.commit()
        return

    footer_text = embed.footer.text.split("\n")[1]
    data = str(base64.b64decode(footer_text))[2:-1]
    guild = client.get_guild(int(data))

    sender_name, sender_desc = " ".join(embed.fields[0].name.split()[1:])[:-1].split("#")
    sender = get(guild.members, name=sender_name, discriminator=sender_desc)

    other_name, other_desc = " ".join(embed.fields[1].name.split()[1:])[:-1].split("#")
    other = get(guild.members, name=other_name, discriminator=other_desc)

    if decision_type == "–ü—Ä–∏–Ω—è—Ç—å –æ–±–º–µ–Ω":
        sender_items = embed.fields[0].value
        other_items = embed.fields[1].value

        if sender_items != "–¶–µ–ª–æ–µ –Ω–∏—á–µ–≥–æ":
            await swap_items(guild, sender_items, sender.id, other.id)
        if other_items != "–¶–µ–ª–æ–µ –Ω–∏—á–µ–≥–æ":
            await swap_items(guild, other_items, sender.id, other.id)

        await sender.send("Done!")
        await other.send("Done!")

        channel = await other.create_dm()
        msg = await channel.fetch_message(message.id)
        await msg.delete()
        return

    if decision_type == "–û—Ç–∫–ª–æ–Ω–∏—Ç—å –æ–±–º–µ–Ω":
        await sender.send(f":x: {other.name} –Ω–µ –ø—Ä–∏–Ω—è–ª –æ–±–º–µ–Ω")
        await message.delete()
        return

    if member.id != sender.id:
        return

    if decision_type == "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±–º–µ–Ω":
        await interaction.send("–û–±–º–µ–Ω –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! [–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å]")
        await message.delete()

        embed.title = "·≤º·≤º·≤º·≤º·≤º·≤º·≤º·≤º**Àπ** –í–∞–º –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞ **Àº**"
        await other.send(
            "–í–∞–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ–±–º–µ–Ω! –î–µ—Ç–∞–ª–∏:",
            embed=embed,
            components=[
                [Button(style=ButtonStyle.green, label="–ü—Ä–∏–Ω—è—Ç—å –æ–±–º–µ–Ω"),
                 Button(style=ButtonStyle.red, label="–û—Ç–∫–ª–æ–Ω–∏—Ç—å –æ–±–º–µ–Ω")]
            ]
        )
        return

    if decision_type == "–û—Ç–º–µ–Ω–∏—Ç—å –æ–±–º–µ–Ω":
        await interaction.send("–û–±–º–µ–Ω –æ—Ç–º–µ–Ω—ë–Ω [–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å]")
        await message.delete()
        return


@client.event
async def on_reaction_add(reaction, user):
    if user.bot:
        return

    _message = reaction.message
    _emoji = reaction.emoji
    _channel = _message.channel

    if _emoji == "‚úÖ":
        if "–ß—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ –ø–∞—Ä—Ç–∏–∏ –ø–æ–∫–µ—Ä–∞" in _message.content:
            text = _message.content
            members = [await clean_member_id(member.split("  ")[-1]) for member in text.split("\n")[4:]]

            user_balance = db_sess.query(User).filter(User.id == f"{user.id}-{_message.guild.id}").first().balance
            bet = int(text.split("\n")[2].split()[6])
            if user_balance < bet:
                await _message.channel.send(":x: –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã!")
                await reaction.remove(user)
                return
            if user.id in members:
                return

            if "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç :(" in text:
                text = "\n".join(text.split("\n")[:-1])
                text += f"\n·≤º·≤º·≤º{numbers_emoji[1]}  {user.mention}"
            else:
                number = len(text.split("\n")) - 3
                text += f"\n·≤º·≤º·≤º{numbers_emoji[number]}  {user.mention}"

            await _message.edit(content=text)
        elif "–ö–†–ï–°–¢–ò–ö–ò-–ù–û–õ–ò–ö–ò" in _message.content:
            txt = _message.content.split()
            if txt[2][:-1] == user.name:
                await _message.delete()
                await first_send_tic_tac_toe(_channel, txt[2][:-1], txt[5])

    if _emoji in [numbers_emoji[i] for i in range(1, 10)]:
        embed = _message.embeds[0]
        if embed.fields[0].value.split()[1][:-1] == user.name:
            # num = 0
            # for i in range(1, 10):
            #     if numbers_emoji[i] == _emoji:
            #         num = i
            #         break
            #
            # p1 = embed.fields[0].value.split()[1][:-1]
            # p2, p3 = embed.footer.text.split()[1][:-1], embed.footer.text.split()[3]
            # player = p2 if p1 == p2 else p3
            #
            # cross_and_zero = []
            # count = 1
            # for elem in embed.fields[1].value:
            #     if elem in ['‚ùå', '‚≠ï']:
            #         if count == num:
            #             if player == p2:
            #                 elem = '‚ùå'
            #         cross_and_zero.append(elem)
            #         count += 1
            # print(cross_and_zero)
            #
            # embed.fields[0].value = f"*–•–æ–¥–∏—Ç: {p2 if player != p2 else p3}*"
            #
            # await msg.edit(embed=embed)

            for _user in await reaction.users().flatten():
                await reaction.remove(_user)


# # –°–û–ë–´–¢–ò–ï,
# @client.event
# async def on_command_error(ctx, error):
#     print(error)
#     if isinstance(error, CommandNotFound):
#         await ctx.message.delete()
#         await throw_error(ctx, error)


"""
====================================================================================================================
=========================== –†–ê–ó–î–ï–õ –° –ö–û–ú–ê–ù–î–ê–ú–ò –ù–ê–°–¢–†–ê–ò–í–ê–Æ–©–ò–ú–ò –°–ï–†–í–ï–† –ò –§–£–ù–ö–¶–ò–Ø–ú–ò –î–õ–Ø –ù–ò–• ===========================
====================================================================================================================
"""


# –§–£–ù–ö–¶–ò–Ø, –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–∞–Ω–∞–ª—É "üé∂–ì–ª–∞–≤–Ω–∞—è —Ç–µ–º–∞" –Ω–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–∞—Ö
async def channel_connection():
    for guild in client.guilds:
        voice_channel = get(guild.voice_channels, name="üé∂–ì–ª–∞–≤–Ω–∞—è —Ç–µ–º–∞")
        if voice_channel:
            try:
                # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–∞–Ω–∞–ª—É
                voice = await voice_channel.connect()
                # –í–∫–ª—é—á–µ–Ω–∏–µ –º—É–∑—ã–∫–∏
                video = new('https://www.youtube.com/watch?v=z_HWtzUHm6s&t=1s')
                audio = video.getbestaudio().url
                voice.play(FFmpegPCMAudio(audio, **ffmpeg_opts, executable="ffmpeg/bin/ffmpeg.exe"))
            except Exception as e:
                print(e)


# –§–£–ù–ö–¶–ò–Ø, –æ—Ç–ø—Ä–∞–≤–ª—è—é—â–∞—é —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
async def send_registration_msg(channel):
    await channel.send(f"**–í —ç—Ç–æ–º —á–∞—Ç–µ –≤—ã –¥–æ–ª–∂–Ω—ã —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.** *–ü–æ–¥—Ö–æ–¥–∏—Ç–µ –∫ —ç—Ç–æ–º—É –≤–æ–ø—Ä–æ—Å—É —Å —É–º–æ–º!*")

    # ======= –í–´–ë–û–† –†–ê–°–´
    text = '*```yaml\n' \
           '‚û¢ –û—Ç —Ä–∞—Å—ã –∑–∞–≤–∏—Å—è—Ç –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏.\n' \
           '‚û¢ –ü–æ–∫–∞ –≤—ã –Ω–µ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –≤—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≤—ã–±–∏—Ä–∞—Ç—å —Ä–∞—Å—É.```*'
    embed = discord.Embed(title='‚ÆÆ __**–í—ã–±–æ—Ä —Ä–∞—Å—ã:**__', color=44444)
    embed.add_field(name='**–í–∞–∂–Ω–æ:**', value=text, inline=False)

    await channel.send(
        embed=embed,
        components=[
            [Button(style=ButtonStyle.gray, label="–°–µ–≤–µ—Ä—è–Ω–µ", emoji=client.get_emoji(emoji["north"])),
             Button(style=ButtonStyle.gray, label="–Æ–∂–∞–Ω–µ", emoji=client.get_emoji(emoji["south"])),
             Button(style=ButtonStyle.gray, label="–¢–µ—Ö–Ω–æ-–≥–∏–∫–∏", emoji=client.get_emoji(emoji["techno"]))]
        ]
    )
    # ======= –í–´–ë–û–† –ü–†–û–ò–°–•–û–ñ–î–ï–ù–ò–Ø
    text = '*```yaml\n' \
           '‚û¢ –û—Ç –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è –∑–∞–≤–∏—Å—è—Ç –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏.\n' \
           '‚û¢ –ü–æ–∫–∞ –≤—ã –Ω–µ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –≤—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≤—ã–±–∏—Ä–∞—Ç—å –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏–µ.```*'
    embed = discord.Embed(title='‚ÆÆ __**–í—ã–±–æ—Ä –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è:**__', color=44444)
    embed.add_field(name='**–í–∞–∂–Ω–æ:**', value=text, inline=False)

    await channel.send(
        embed=embed,
        components=[
            [Button(style=ButtonStyle.gray, label="–ë–æ–≥–∞—Ç–∞—è —Å–µ–º—å—è", emoji=client.get_emoji(emoji["rich"])),
             Button(style=ButtonStyle.gray, label="–û–±—ã—á–Ω–∞—è —Å–µ–º—å—è", emoji=client.get_emoji(emoji["norm"])),
             Button(style=ButtonStyle.gray, label="–ë–µ–¥–Ω–æ—Å—Ç—å", emoji=client.get_emoji(emoji["poor"]))]
        ]
    )
    # ======= –°–û–ó–î–ê–ù–ò–ï –ò–ú–ï–ù–ò
    text = '*```yaml\n' \
           '‚û¢ –ñ–µ–ª–∞–µ–º–æ–µ –≤–∞–º–∏ –∏–º—è –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –¥–∞–Ω–Ω—ã–π —á–∞—Ç —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã: "/name".\n' \
           '‚û¢ –ò–º—è –Ω–µ –≤–ª–∏—è–µ—Ç –Ω–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏, –ø—Ä–∏ –Ω–∞–ø–∏—Å–∞–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã –Ω–∞–ø–∏—à–∏—Ç–µ –∏–º—è –º–∞–ª–µ–Ω—å–∫–∏–º–∏ –±—É–∫–≤–∞–º–∏.\n' \
           '‚û¢ –í–≤–æ–¥–∏—Ç–µ –∏–º—è —Å —É–º–æ–º —Ç–∞–∫ –∫–∞–∫ –µ–≥–æ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∞.' \
           '‚û¢ –ü–æ—Å–ª–µ –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∏–º–µ–Ω–∏ –≤—ã –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è.```*'
    embed = discord.Embed(title='‚ÆÆ __**–í–∞—à–µ –∏–º—è:**__', color=44444)
    embed.add_field(name='**–í–∞–∂–Ω–æ:**', value=text, inline=False)

    await channel.send(embed=embed)


# –§–£–ù–ö–¶–ò–Ø, –æ—Ç–ø—Ä–∞–≤–ª—è—é—â–∞—é —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
async def send_information_msg(channel):
    # ======= –ò—Å—Ç–æ—Ä–∏—è
    text = '*```yaml\n' \
           '  –û–∫–æ–ª–æ –≤–µ–∫–∞ –Ω–∞–∑–∞–¥ —á–µ–ª–æ–≤–µ—á–µ—Å—Ç–≤–æ —Å–º–æ–≥–ª–æ –ø–æ–∫–∏–Ω—É—Ç—å –ó–µ–º–ª—é –∏ –æ—Å–≤–æ–∏—Ç—å –ú–∞—Ä—Å, –Ω–∞ –Ω—ë–º –ª—é–¥–∏ –Ω–∞—à–ª–∏ —Ä—É–¥—É –ø–æ–¥ ' \
           '–Ω–∞–∑–≤–∞–Ω–∏–µ–º –≠–∫–∑–æ—Ä–∏–π. –õ—é–¥–∏ —Ç—â–∞—Ç–µ–ª—å–Ω–æ –∏–∑—É—á–∞–ª–∏ –≠–∫–∑–æ—Ä–∏–π, –∏ –æ—Ç–∫—Ä—ã–ª–∏ –¥–ª—è —Å–µ–±—è –º–Ω–æ–≥–æ —Ä–∞–∑–Ω—ã—Ö —Å–≤–æ–π—Å—Ç–≤ —ç—Ç–æ–π —Ä—É–¥—ã, –≤ ' \
           '—Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –º–Ω–æ–≥–∏—Ö —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤ –ª—é–¥–∏ —Å–º–æ–≥–ª–∏ –∏–∑–≤–ª–µ–∫–∞—Ç—å –∏–∑ —ç—Ç–æ–π —Ä—É–¥—ã –º–Ω–æ–≥–æ —ç–Ω–µ—Ä–≥–∏–∏ —Å –æ–≥—Ä–æ–º–Ω–æ–π –º–æ—â—å—é. –í —Ö–æ–¥–µ' \
           ' —Ç–∞–∫–∏—Ö –æ—Ç–∫—Ä—ã—Ç–∏–π –ª—é–¥–∏ —Å–º–æ–≥–ª–∏ –±—ã—Å—Ç—Ä–æ —Ä–∞–∑–≤–∏—Ç—å —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ –æ—Å–≤–æ–∏—Ç—å –∫–æ—Å–º–æ—Å –Ω–∞–º–Ω–æ–≥–æ –ª—É—á—à–µ, —á–µ–ª–æ–≤–µ—á–µ—Å—Ç–≤–æ —Å—Ç–∞–ª–æ' \
           '–ø—É—Ç–µ—à–µ—Å—Ç–≤–æ–≤–∞—Ç—å –∏ –∫–æ–ª–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø–ª–∞–Ω–µ—Ç—ã –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∑–≤—ë–∑–¥–Ω—ã—Ö —Å–∏—Å—Ç–µ–º–∞—Ö.\n' \
           '  –ó–µ–º–ª—è –≤ —Å–≤–æ—ë –≤—Ä–µ–º—è, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é —Å—Ç–∞–ª–∞ –¥–µ–≥—Ä–∞–¥–∏—Ä–æ–≤–∞—Ç—å, –∏–∑ –∑–∞ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤ –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–≤–æ–¥–∏–ª–∏ –Ω–∞ –ó–µ–º–ª–µ –∏ ' \
           '–ª—é–¥–µ–π –æ—Ç–≤–µ—Ä–≥–∞—é—â–∏—Ö –Ω–æ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, —Ä–æ–¥–Ω–∞—è –ø–ª–∞–Ω–µ—Ç–∞ —á–µ–ª–æ–≤–µ—á–µ—Å—Ç–≤–∞ —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è —Å—Ç–∞–ª–∞ —Å–∫–≤–µ—Ä–Ω—ã–º ' \
           '–º–µ—Å—Ç–æ–º. –ù–∞ –ó–µ–º–ª—é —Å—Ç–∞–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–µ—É–≥–æ–¥–Ω—ã—Ö –ª—é–¥–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–≤–µ—Ä—à–∞–ª–∏ –∫–∞–∫–∏–µ –ª–∏–±–æ –ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏–µ. –£–∂–µ ' \
           '–Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–∫–æ–ª–µ–Ω–∏–π –ª—é–¥–∏ —Å –ø–ª–∞–Ω–µ—Ç—ã –ó–µ–º–ª—è –∂–∏–≤—É—Ç –≤ —É–∂–∞—Å–Ω–æ–º –º–∏—Ä–µ —ç—Ç–æ–π –ø–ª–∞–Ω–µ—Ç—ã. –í—ã —Ä–æ–¥–∏–ª–∏—Å—å –Ω–∞ –ó–µ–º–ª–µ, –∏ ' \
           '–≤–∞–º –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç –Ω–∞ –Ω–µ–π –≤—ã–∂–∏—Ç—å.```*'
    embed = discord.Embed(title='‚ÆÆ __**–ò—Å—Ç–æ—Ä–∏—è:**__', color=44444)
    embed.add_field(name='**‚Äï‚Äï**', value=text, inline=False)

    await channel.send(embed=embed)

    # ======= –ò–Ω—Ñ–æ
    text = '*```yaml\n' \
           '‚û¢ –î–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã —É–∑–Ω–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã, –Ω–∞–ø–∏—à–∏—Ç–µ –≤ —á–∞—Ç–µ "/", –≤–∞–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—Å—è —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ —Å –∏—Ö –æ–ø–∏—Å–∞–Ω–∏—è–º–∏.' \
           '‚û¢ –û—Å–Ω–æ–≤–Ω–∞—è –≤–∞–ª—é—Ç–∞ –∏–≥—Ä—ã - Gaudium.' \
           '‚û¢ –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.```*'
    embed = discord.Embed(title='‚ÆÆ __**–ü—Ä–∞–≤–∏–ª–∞:**__', color=44444)
    embed.add_field(name='**‚Äï‚Äï**', value=text, inline=False)

    await channel.send(embed=embed)


# –§–£–ù–ö–¶–ò–Ø, –∑–∞–ø–∏—Å—ã–≤–∞—é—â–∞—è –≤—Å–µ—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
async def write_db(guild):
    chek_write_db = False
    for member in guild.members:
        id_user = f"{member.id}-{guild.id}"
        if not member.bot and not db_sess.query(User).filter(User.id == id_user).first():
            user = User()
            user.id = id_user
            user.name = '-1'
            user.nation = '-1'
            user.origin = '-1'
            user.balance = 0
            user.level = 1
            user.xp = 0
            user.skill_points = 0
            user.health = 5
            user.strength = 5
            user.intelligence = 5
            user.dexterity = 5
            user.speed = 5
            user.inventory = ''
            db_sess.add(user)
            chek_write_db = True
    db_sess.commit()
    return chek_write_db


# –§–£–ù–ö–¶–ò–Ø, —É–¥–∞–ª—è—é—â–∞—è –≤—Å–µ—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async def delete_db(guild):
    for member in guild.members:
        user = db_sess.query(User).filter(User.id == f"{member.id}-{guild.id}").first()
        if not member.bot and user:
            db_sess.delete(user)
    db_sess.commit()


# –§–£–ù–ö–¶–ò–Ø, —Å–æ–∑–¥–∞—é—â–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
async def create_category(guild, title):
    return await guild.create_category(title)


# –§–£–ù–ö–¶–ò–Ø, —Å–æ–∑–¥–∞—é—â–∞—è —á–∞—Ç—ã
async def create_channel(guild, channel_info, category, title, roles_for_permss):
    kind, allow_messaging, pos = channel_info
    channel = None
    # –°–æ–∑–¥–∞–Ω–∏–µ —á–∞—Ç–∞
    if not get(guild.channels, name=title):
        channel = await guild.create_text_channel(title, category=category, position=pos)
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —á–∞—Ç—É
        if kind != 'all':
            for _name, role in roles_for_permss.items():
                await channel.set_permissions(role, send_messages=allow_messaging, read_messages=kind == _name)
    return channel


# –ö–û–ú–ê–ù–î–ê, –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—é—â–∞—è —Å–µ—Ä–≤–µ—Ä
@client.command()
@commands.has_guild_permissions(administrator=True)
async def implement(ctx):
    await ctx.message.delete()
    guild = ctx.guild
    check_implement = False

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–ª–µ–π
    for _name, color in roles_game.items():
        if not get(guild.roles, name=_name):
            await guild.create_role(name=_name, color=color)
            await ctx.send(f":white_check_mark: *–†–æ–ª—å {_name} —Å–æ–∑–¥–∞–Ω–∞.*")
            check_implement = True

    roles_for_permss = {
        "non-game": guild.default_role,
        "game": get(guild.roles, name="–ò–≥—Ä–æ–∫"),
        "city_topolis": get(guild.roles, name="–¢–æ–ø–æ–ª–∏—Å"),
        "city_braifast": get(guild.roles, name="–ë—Ä–∞–∏—Ñ–∞—Å—Ç"),
        "city_jadiff": get(guild.roles, name="–î–∂–∞–¥–∏—Ñ—Ñ")
    }

    # –°–æ–∑–¥–∞–Ω–∏–µ —á–∞—Ç–æ–≤ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    for category, channels in Objects.items():
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        _category = get(guild.categories, name=category)
        if not _category:
            _category = await create_category(guild, category)
            check_implement = True
            await ctx.send(f":white_check_mark: *–ö–∞—Ç–µ–≥–æ—Ä–∏—è {category} —Å–æ–∑–¥–∞–Ω–∞.*")
        # –°–æ–∑–¥–∞–Ω–∏–µ —á–∞—Ç–æ–≤
        for channel in channels.keys():
            channel = await create_channel(guild, channels[channel].values(), _category, channel, roles_for_permss)
            if channel:
                check_implement = True
                if channel.name == "üö™—Å–æ–∑–¥–∞–Ω–∏–µ-–ø–µ—Ä—Å–æ–Ω–∞–∂–∞":
                    await send_registration_msg(get(guild.channels, name="üö™—Å–æ–∑–¥–∞–Ω–∏–µ-–ø–µ—Ä—Å–æ–Ω–∞–∂–∞"))
                if channel.name == "üìú–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è":
                    await send_information_msg(get(guild.channels, name="üìú–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"))
                if channel.name == "üõí–º–∞–≥–∞–∑–∏–Ω":
                    pass
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é (—Å–¥–µ–ª–∞–Ω–æ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ /implement)
        for channel in channels.keys():
            await get(guild.channels, name=channel).edit(category=_category, position=channels[channel]["position"])

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –º—É–∑—ã–∫–∏
    name_voice = "üé∂–ì–ª–∞–≤–Ω–∞—è —Ç–µ–º–∞"
    if not get(guild.voice_channels, name=name_voice):
        channel = await guild.create_voice_channel(name_voice,
                                                   category=get(guild.categories, name="–û–ë–©–ï–ï"), position=4)
        await channel.set_permissions(roles_for_permss["non-game"], speak=False, view_channel=False)
        await channel.set_permissions(roles_for_permss["game"], speak=False, view_channel=True)
        check_implement = True

    # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    if await write_db(guild):
        await ctx.send(":white_check_mark: *–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø–æ–ª–Ω–µ–Ω–∞.*")
        check_implement = True

    # –°–æ–∑–¥–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞
    await store_update(guild)

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–∞–Ω–∞–ª—É "üé∂–ì–ª–∞–≤–Ω–∞—è —Ç–µ–º–∞"
    await channel_connection()

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    if check_implement:
        await ctx.send(":white_check_mark: **–ì–æ—Ç–æ–≤–æ!**")
    else:
        await ctx.send(":x: **–ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —É–∂–µ –±—ã–ª–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞!**")


# –ö–û–ú–ê–ù–î–ê, —É–¥–∞–ª—è—é—â–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Å–µ—Ä–≤–µ—Ä–∞
@client.command()
@commands.has_guild_permissions(administrator=True)
async def reset(ctx):
    await ctx.message.delete()
    guild = ctx.guild
    # –£–¥–∞–ª–µ–Ω–∏–µ —á–∞—Ç–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ —Ç–¥
    discord_objects = []
    for category, channels in Objects.items():
        discord_objects.append(get(guild.categories, name=category))
        for channel in channels.keys():
            discord_objects.append(get(guild.channels, name=channel))
    for role in roles_game:
        discord_objects.append(get(guild.roles, name=role))

    for discord_object in discord_objects:
        if discord_object:
            await discord_object.delete()

    # –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –¥–ª—è –º—É–∑—ã–∫–∏
    await get(guild.voice_channels, name="üé∂–ì–ª–∞–≤–Ω–∞—è —Ç–µ–º–∞").delete()

    # –£–¥–∞–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    await delete_db(guild)

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    await ctx.send(":white_check_mark: **–ì–æ—Ç–æ–≤–æ!**")


# –ö–û–ú–ê–ù–î–ê, —É–¥–∞–ª—è—é—â–∞—è –≤—Å–µ—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
@client.command()
@commands.has_guild_permissions(administrator=True)
async def delete_users(ctx):
    await ctx.message.delete()
    guild = ctx.guild
    chek_delete_db = False
    for member in guild.members:
        user = db_sess.query(User).filter(User.id == f"{member.id}-{guild.id}").first()
        if not member.bot and user:
            db_sess.delete(user)
            chek_delete_db = True
    db_sess.commit()
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    if chek_delete_db:
        await ctx.send(":white_check_mark: **–ì–æ—Ç–æ–≤–æ!**")
    else:
        await ctx.send(":x: **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!**")


"""
====================================================================================================================
========================================= –†–ê–ó–î–ï–õ –° –§–£–ù–ö–¶–ò–Ø–ú–ò –î–õ–Ø –ú–ê–ì–ê–ó–ò–ù–ê ==========================================
====================================================================================================================
"""


# –§–£–ù–ö–¶–ò–Ø, –æ–±–Ω–æ–≤–ª—è—é—â–∞—è –º–∞–≥–∞–∑–∏–Ω
async def store_update(guild):
    store_channel = get(guild.channels, name="üõí–º–∞–≥–∞–∑–∏–Ω")
    if store_channel:
        # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
        await store_channel.purge(limit=None)
        # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        items_all = db_sess.query(Items).all()
        types = [
            {"NAME": "–û–†–£–ñ–ò–ï",
             "firearms": "–û–≥–Ω–µ—Å—Ç—Ä–µ–ª—å–Ω–æ–µ –æ—Ä—É–∂–∏–µ.",
             "firearms_auto": "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–≥–Ω–µ—Å—Ç—Ä–µ–ª—å–Ω–æ–µ –æ—Ä—É–∂–∏–µ.",
             "steel arms": "–•–æ–ª–æ–¥–Ω–æ–µ –æ—Ä—É–∂–∏–µ.",
             "energy weapon": "–≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ä—É–∂–∏–µ."},
            {"NAME": "–û–î–ï–ñ–î–ê",
             "armor_head": "–ì–æ–ª–æ–≤–Ω—ã–µ —É–±–æ—Ä—ã.",
             "armor_body": "–í–µ—Ä—Ö–Ω—è—è –æ–¥–µ–∂–¥–∞.",
             "armor_legs": "–ü–æ–Ω–æ–∂–∏.",
             "armor_feet": "–û–±—É–≤—å."},
            {"NAME": "–ï–î–ê",
             "food": "–ï–¥–∞."}
        ]
        # –ú–∞–≥–∞–∑–∏–Ω
        for _type in types:
            items = list(filter(lambda x: x.type in _type.keys(), items_all.copy()))
            random.shuffle(items)
            items = items[:random.randint(4, 6)]
            # Embed —Å–æ–æ–±—â–µ–Ω–∏—è
            embed = discord.Embed(title=f"‚ÆÆ __**{_type['NAME']}:**__", color=0xf1c40f)
            for item in items:
                embed.add_field(
                    name=f"**{item.name}:**",
                    value=f"‚û¢ **–¶–µ–Ω–∞:** {item.price} {client.get_emoji(emoji['money'])}"
                          f"```fix\n–û–ø–∏—Å–∞–Ω–∏–µ: {item.description} –¢–∏–ø: {_type[item.type]}```", inline=False
                )
            # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
            buttons = [Button(style=ButtonStyle.gray, label=f"–ö—É–ø–∏—Ç—å {item.name}") for item in items]
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            await store_channel.send(
                embed=embed,
                components=[buttons]
            )


# –§–£–ù–ö–¶–ò–Ø, –ø—Ä–æ–≤–µ—Ä—è—é—â–∞—è –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω
async def store_update_cycle():
    while True:
        if datetime.datetime.now().strftime("%H:%M") == TIME_STORE_UPDATE:
            for guild in client.guilds:
                await store_update(guild)
        await asyncio.sleep(60)


"""
====================================================================================================================
================================== –†–ê–ó–î–ï–õ –° –ö–û–ú–ê–ù–î–ê–ú–ò –í–ó–ê–ò–ú–û–î–ï–ô–°–¢–í–ò–Ø –° –ò–ù–í–ï–ù–¢–ê–†–Å–ú ==================================
====================================================================================================================
"""


# –§–£–ù–ö–¶–ò–Ø, –¥–æ–±–∞–≤–ª—è—é—â–∞—è –ø—Ä–µ–¥–º–µ—Ç –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
async def add_item(guild, player_id, item):
    user = db_sess.query(User).filter(User.id == f"{player_id}-{guild.id}").first()
    user.inventory += f"{';' if user.inventory != '' else ''}{item}"
    db_sess.commit()


# –§–£–ù–ö–¶–ò–Ø, –∫–æ—Ç–æ—Ä–∞—è —É–±–∏—Ä–∞–µ—Ç –ø—Ä–µ–¥–º–µ—Ç –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
async def remove_item(guild, player_id, item):
    user = db_sess.query(User).filter(User.id == f"{player_id}-{guild.id}").first()
    inventory_list = user.inventory.split(";")
    inventory_list.remove(item)
    user.inventory = ";".join(inventory_list)
    db_sess.commit()


# –§–£–ù–ö–¶–ò–Ø, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–ª—É—á–∞–µ—Ç –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –∏–≥—Ä–æ–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ - {–ø—Ä–µ–¥–º–µ—Ç:–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ}
async def get_inventory(player_id, guild):
    user_inventory = db_sess.query(User).filter(User.id == f"{player_id}-{guild.id}").first().inventory
    player_inventory = {}
    if len(user_inventory) != 0:
        for item in user_inventory.split(";"):
            player_inventory[item] = player_inventory.get(item, 0) + 1
    return player_inventory


# –§–£–ù–ö–¶–ò–Ø, –∫–æ—Ç–æ—Ä–∞—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è —Ç—Ä–µ–π–¥–∞ –≤ –¥–æ–ª–∂–Ω—ã–π –≤–∏–¥
async def get_formatted_items(player_id, guild, items):
    player_inventory = await get_inventory(player_id, guild)
    player_items_list = list(player_inventory.keys())
    formatted_items = []
    for item_info in items.split(","):
        item_id, amount = item_info.split(":")
        formatted_items.append(f"{player_items_list[int(item_id) - 1]} - x{amount}")

    return formatted_items


# –§–£–ù–ö–¶–ò–Ø, –∫–æ—Ç–æ—Ä–∞—è –ø–µ—Ä–µ–¥–∞—ë—Ç –ø—Ä–µ–¥–º–µ—Ç—ã –∏–∑ –æ–¥–Ω–æ–≥–æ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –≤ –¥—Ä—É–≥–æ–π
async def swap_items(guild, items, sender_id, other_id):
    for line in items.split("\n"):
        item, amount = line.split(" - ")
        for _ in range(int(amount[-1])):
            await remove_item(guild, sender_id, item)
            await add_item(guild, other_id, item)


# –ö–û–ú–ê–ù–î–ê, —Ç—Ä–µ–π–¥
@slash.slash(
    name="trade",
    description="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞ –¥—Ä—É–≥–æ–º—É –∏–≥—Ä–æ–∫—É.",
    options=[{"name": "member", "description": "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", "type": 6, "required": True},
             {"name": "your_items", "description": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–∞—Ö –æ–±–º–µ–Ω–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é —Ñ–æ—Ä–º–∞—Ç–∞ - "
                                                   "ID –ø—Ä–µ–¥–º–µ—Ç–∞:–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", "type": 3, "required": False},
             {"name": "their_items", "description": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–µ–¥–º–µ—Ç–∞—Ö –æ–±–º–µ–Ω–∞ –¥—Ä—É–≥–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é "
                                                    "—Ñ–æ—Ä–º–∞—Ç–∞ - ID –ø—Ä–µ–¥–º–µ—Ç–∞:–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", "type": 3, "required": False}],
    guild_ids=test_servers_id
)
@commands.has_role("–ò–≥—Ä–æ–∫")
async def trade(ctx, member, your_items=None, their_items=None):
    player = ctx.author
    guild = ctx.guild
    if player == member:
        raise IncorrectUser("- –°–æ–≤–µ—Ä—à–∞—Ç—å –æ–±–º–µ–Ω—ã —Å —Å–∞–º–∏–º —Å–æ–±–æ–π –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ!\n"
                            "–ï—Å–ª–∏ –≤–∞–º –Ω–µ —Å –∫–µ–º –æ–±–º–µ–Ω–∏–≤–∞—Ç—å—Å—è, —Ç–æ —Å—Ç–æ–∏—Ç –ø–æ–∏—Å–∫–∞—Ç—å –¥—Ä—É–∑–µ–π?")
    if member.bot:
        raise IncorrectUser("- –ù–µ–ª—å–∑—è –æ–±–º–µ–Ω–∏–≤–∞—Ç—å—Å—è —Å –ë–æ—Ç–∞–º–∏!")
    if get(guild.roles, name="–ò–≥—Ä–æ–∫") not in member.roles:
        raise IncorrectUser(f"- –£ {member.name} –Ω–µ—Ç —Ä–æ–ª–∏ \"–ò–≥—Ä–æ–∫\"!")

    if not your_items and not their_items:
        raise IncompleteTrade(f"- –í—ã –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏ —Ç—Ä–µ–π–¥!\n"
                              f"–ï—Å–ª–∏ –í—ã –Ω–∏—á–µ–≥–æ –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –≤ –æ–±–º–µ–Ω, "
                              f"—Ç–æ –∑–∞—á–µ–º –í–∞–º –æ–±–º–µ–Ω–∏–≤–∞—Ç—å—Å—è —Å {member.name} –≤–æ–æ–±—â–µ?")

    formatted_player_offer_items = ["–¶–µ–ª–æ–µ –Ω–∏—á–µ–≥–æ"] if not your_items else \
        await get_formatted_items(player.id, guild, your_items)

    formatted_member_offer_items = ["–¶–µ–ª–æ–µ –Ω–∏—á–µ–≥–æ"] if not their_items else \
        await get_formatted_items(member.id, guild, their_items)

    embed = discord.Embed(title="·≤º·≤º·≤º·≤º·≤º·≤º·≤º·≤º**Àπ** –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ **Àº**", color=0xFFFFF0)
    extra_info = str(base64.b64encode(str(guild.id).encode("UTF-8")))[2:-1]

    embed.add_field(name=f"–ü—Ä–µ–¥–º–µ—Ç—ã\t{player}:", value="\n".join(formatted_player_offer_items))
    embed.add_field(name=f"–ü—Ä–µ–¥–º–µ—Ç—ã\t{member}:", value="\n".join(formatted_member_offer_items))
    embed.set_footer(text=f"‚îà‚îÅ‚îÅ‚îÅ‚îà‚îÅ‚îÅ‚îÅ‚îà‚îÅ‚îÅ‚îÅ‚îà‚îÅ‚îÅ‚îÅ‚îà‚îÅ‚îÅ‚îÅ‚îà‚îÅ‚îÅ‚îÅ‚îà‚îÅ‚îÅ‚îÅ‚îà‚îÅ‚îÅ‚îÅ‚îà‚îÅ‚îÅ‚îÅ‚îà‚îÅ‚îÅ‚îÅ‚îà\n{extra_info}")

    msg = await ctx.send("–û–±–º–µ–Ω —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω!")
    await msg.delete()
    await ctx.channel.send(
        embed=embed,
        components=[
            [Button(style=ButtonStyle.green, label="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±–º–µ–Ω"),
             Button(style=ButtonStyle.red, label="–û—Ç–º–µ–Ω–∏—Ç—å –æ–±–º–µ–Ω")]
        ]
    )


# –ö–û–ú–ê–ù–î–ê, –ø–µ—Ä–µ–≤–æ–¥ –¥–µ–Ω–µ–≥
@slash.slash(
    name="money_transfer",
    description="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–µ–Ω—å–≥–∏ –¥—Ä—É–≥–æ–º—É –∏–≥—Ä–æ–∫—É.",
    options=[{"name": "member", "description": "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", "type": 6, "required": True},
             {"name": "amount", "description": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–Ω–µ–≥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏", "type": 4, "required": True}],
    guild_ids=test_servers_id
)
@commands.has_role("–ò–≥—Ä–æ–∫")
async def money_transfer(ctx, member, amount):
    guild = ctx.guild
    if member.bot:
        raise IncorrectUser("- –ë–æ—Ç–∞–º –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –¥–µ–Ω—å–≥–∏ –Ω–µ–ª—å–∑—è!\n"
                            "(–Ø –±—ã –≤ –ø—Ä–∏–Ω—Ü–∏–ø–µ –Ω–µ –¥–æ–≤–µ—Ä—è–ª –∏–º, –∫—Ä–æ–º–µ –º–µ–Ω—è, –∫–æ–Ω–µ—á–Ω–æ, —è –ª—É—á—à–∏–π –±–æ—Ç, –ø–æ—á—Ç–∏ —á–µ–ª–æ–≤–µ–∫!)")
    if get(guild.roles, name="–ò–≥—Ä–æ–∫") not in member.roles:
        raise IncorrectUser(f"- –£ {member.name} –Ω–µ—Ç —Ä–æ–ª–∏ \"–ò–≥—Ä–æ–∫\"!")

    player = ctx.author
    player_user = db_sess.query(User).filter(User.id == f"{player.id}-{guild.id}").first()
    member_user = db_sess.query(User).filter(User.id == f"{member.id}-{guild.id}").first()

    if amount < 1:
        raise IncorrectMemberAmount(f"- –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ = 1!")
    if player_user.balance < amount:
        raise IncorrectMemberAmount(f"- –£ {player_user.name} –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ –¥–µ–Ω–µ–≥!")

    player_user.balance -= amount
    member_user.balance += amount

    await ctx.send(":white_check_mark: **–û–±–º–µ–Ω —Å–æ—Å—Ç–æ—è–ª—Å—è!**")
    db_sess.commit()


# –ö–û–ú–ê–ù–î–ê, –æ—Ç–∫—Ä—ã–≤–∞—é—â–∞—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
@slash.slash(
    name="open_inventory",
    description="–û—Ç–∫—Ä—ã—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.",
    options=[{"name": "member", "description": "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", "type": 6, "required": False}],
    guild_ids=test_servers_id
)
@commands.has_role("–ò–≥—Ä–æ–∫")
async def open_inventory(ctx, member=None):
    guild = ctx.guild
    if member:
        if member.bot:
            raise IncorrectUser("- –£ –±–æ—Ç–æ–≤ –Ω–µ—Ç –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è!\n"
                                "–î–∞–∂–µ –Ω–µ –ø—ã—Ç–∞–π—Ç–µ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —É –Ω–∏—Ö –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å - —ç—Ç–æ –±–µ—Å–ø–æ–ª–µ–∑–Ω–æ!")
        if get(guild.roles, name="–ò–≥—Ä–æ–∫") not in member.roles:
            raise IncorrectUser(f"- –£ {member.name} –Ω–µ—Ç —Ä–æ–ª–∏ \"–ò–≥—Ä–æ–∫\"!")

    value_emoji = client.get_emoji(emoji["money"])
    player = member if member else ctx.author
    player_inventory = await get_inventory(player.id, guild)
    player_db = db_sess.query(User).filter(User.id == f"{player.id}-{guild.id}").first()
    embed = discord.Embed(title=f"**Àπ –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å __{player_db.name.upper()}__Àº**",
                          description=f"–ë–∞–ª–∞–Ω—Å: {player_db.balance} Gaudium", color=0xFFFFF0)

    if len(player_inventory.keys()) != 0:
        item_id = 1
        for item, amount in player_inventory.items():
            item_obj = db_sess.query(Items).filter(Items.name == item).first()
            text = f"**–ü–æ—Ä—è–¥–∫–æ–≤—ã–π ID:** *{item_id}*\n" \
                   f"**–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:** *{amount}*\n" \
                   f"**–¶–µ–Ω–∞:** *{item_obj.price} {value_emoji}*\n" \
                   f"**–û–ø–∏—Å–∞–Ω–∏–µ:** *{item_obj.description}*"

            embed.add_field(name=f"**{item.upper()}:**",
                            value=text,
                            inline=True)
            item_id += 1
    else:
        embed.add_field(name="–ü–æ–ª–Ω–æ—Å—Ç—å—é –ø—É—Å—Ç", value="\u200b")

    embed.set_thumbnail(url=player.avatar_url)
    embed.set_footer(text=f"–ù–∏–∫–Ω–µ–π–º Discord: {player.name}")

    await ctx.send(embed=embed)
"""
====================================================================================================================
============================================= –†–ê–ó–î–ï–õ –° –°–û–ó–î–ê–ù–ò–ï–ú –ú–ò–°–°–ò–ô ============================================
====================================================================================================================
"""


@slash.slash(name="mission_run",
             description="–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º–∏—Å—Å–∏–∏ –Ω–∞ –¥–æ—Å–∫–∞—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π.",
             options=[{"name": "amount", "description": "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –≤ –≥–æ—Ä–æ–¥–∞—Ö",
                       "type": 3, "required": False}],
             guild_ids=test_servers_id)
async def mission_run(ctx, amount=5):
    a = TownMissions(int(amount))
    await a.add_missions()


class TownMissions:
    def __init__(self, amount):
        self.missions = []
        self.town_letters = ['—Ç', '–±', '–¥']
        self.amount = amount
        self.aim = {'find_him': '–ù–∞–π—Ç–∏ –∏ —É–Ω–∏—á–æ–∂–∏—Ç—å', 'stolen_item': '–í–µ—Ä–Ω—É—Ç—å —É–∫—Ä–∞–¥–µ–Ω–Ω—É—é –≤–µ—à—å –≤–ª–∞–¥–µ–ª—å—Ü—É',
                    'foreign territory': '–£–Ω–∏—á—Ç–æ–∂–∏—Ç—å –æ—Ç—Ä—è–¥ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞',
                    'old_tech': '–†–∞–∑–≤–µ–¥–∞—Ç—å –æ–±–æ–∑–Ω–∞—á–µ–Ω–Ω—É—é —É—á—ë–Ω—ã–º–∏ –º–µ—Å—Ç–Ω–æ—Å—Ç—å'}
        self.scenario_to_dif = {'find_him': False, 'stolen_item': False, 'foreign territory': True, 'caravan': False,
                                'old_tech': True}

    async def add_missions(self):
        with open('scenarios.json', encoding="utf8") as scenarios:
            req = json.load(scenarios)
            scenario = req['missions']
            items = req['items']
        for elem in self.town_letters:
            for i in range(self.amount):
                scen = random.choice(list(scenario.keys()))
                diff = random.randint(1, 2)
                if scen != 'stolen_item':
                    if self.scenario_to_dif[scen]:
                        diff = 3
                    self.missions.append(
                        {'time': random.randint(1, 60), 'difficulty': diff, 'descript': random.choice(scenario[scen]),
                         'aim': self.aim[scen]})
                else:
                    line = random.choice(scenario[scen])
                    line = line.replace('item', random.choice(items))
                    self.missions.append(
                        {'time': random.randint(1, 60), 'difficulty': diff, 'descript': line,
                         'aim': self.aim[scen]})
            print(self.missions)
            await self.show_mission(elem)
            self.missions = []

    async def show_mission(self, letter):
        for guild in client.guilds:
            print(guild)
            print(guild.text_channels)
            channel = discord.utils.get(guild.text_channels, name=f"üìã–¥–æ—Å–∫–∞-–æ–±—ä—è–≤–ª–µ–Ω–∏–π-{letter}")
            if channel is not None:
                for elem in self.missions:
                    embed = discord.Embed(title=f"–î–æ—Å—Ç—É–ø–µ–Ω –∫–æ–Ω—Ç—Ä–∞–∫—Ç", color=discord.Colour.from_rgb(255, 160, 122))
                    embed.add_field(name="\u200b", value=f"```{elem['descript']}```", inline=False)
                    embed.add_field(name="**–¶–µ–ª—å:**", value=f"**{elem['aim']}**", inline=True)
                    embed.add_field(name="\u200b", value="\u200b", inline=True)
                    embed.add_field(name="**–°–ª–æ–∂–Ω–æ—Å—Ç—å:**", value=f"**{elem['difficulty']}**", inline=True)
                    await channel.send(embed=embed, components=[Button(style=ButtonStyle.blue, label="–í–∑—è—Ç—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç")])


class CreateBattle:
    def __init__(self, dif):
        self.difficulty = dif
        self.names = ['–õ—ë—Ö–∞', '–ê–Ω–¥—Ä—é—Ö–∞', '–í–∏—Ç–∞–ª—è', '–ñ–µ–∫–∞', '–ì–µ–Ω–∞', '–í–ª–∞–¥', '–î–∏–º–∞', '–Æ—Ä–∞', '–û–ª–µ–≥', '–ú–∏—à–∞', '–î–µ–Ω', '–ú–∞–∫—Å',
                      '–í–æ–≤–∞', '–ê—Ä—Å—é—Ö–∞', '–ú–∞—Ä–∫', '–¢–∞—Ä–∞—Å', '–ö–æ–ª—è–Ω', '–î–∞–Ω—è', '–ü–∞—à–∞', '–õ—ë–Ω—è', '–ö–∏—Ä–∏–ª–ª', '–Ø–Ω', '–î–µ–Ω–∏—Å']
        self.sir_names = ['–•–º—ã—Ä—å', '–ë—É–ª—å–¥–æ–∑–µ—Ä', '–®—É—Å—Ç—Ä—ã–π', '–§–æ–ª—å–≥–∞', '–í–æ–±–ª–∞', '–¢–∞—Ç–∞—Ä–∏–Ω', '–¶—ã–≥–∞–Ω', '–ö–æ–ª–¥—É–Ω', '–ë–æ—Ä–æ–¥–∞',
                          '–§–∏–Ω', '–®–∞–º–∞–Ω', '–ë–µ—Å—Ç–æ–ª–æ—á—å', '–Æ–∂–∞–Ω–∏–Ω', '–ë–æ—á–∫–∞', '–°–æ–∫–æ–ª', '–ë–∞—Ç–æ–Ω', '–ß—ë—Ä—Ç', '–ß—É–≥—É–Ω', '–í–æ—Ä–æ–±–µ–π',
                          '–•–∏–º–∏–∫', '–ö—Ä–æ—Ç', '–ë–∞—Å—Ç–∞—Ä–¥', '–û–∫—É—Ä–æ–∫', '–Ø—Å–µ–Ω—å', '–¢–æ–∫–∞—Ä—å', '–ö—É–≤–∞–ª–¥–∞', '–®–ø–∞–ª–∞', '–†—è–±–æ–π',
                          '–ö–æ–ø–∞—Ç–µ–ª—å']

    async def create_buddies(self):
        name = f'{random.choice(self.names)} {random.choice(self.sir_names)}'
        mag_cap = random.choice([5, 15, 30, 60])
        fire_mods = ['semi']
        if mag_cap == 15:
            fire_mods.append('pew - pew')
        if mag_cap >= 30:
            fire_mods.append('auto')
        if self.difficulty == 1:
            return {'fight_stats': {'hp': random.randint(20, 40), 'armor': random.randint(5, 15),
                                    'damage': random.randint(7, 15), 'aim': random.randint(5, 14), 'mag': mag_cap,
                                    'max_mag': mag_cap, 'fire_mods': fire_mods, 'cur_mod': random.choice(fire_mods)},
                    'stats': {'race_bonus': 0, 'streight': random.randint(5, 10), 'intel': random.randint(5, 10),
                              'motor': random.randint(5, 10), 'speed': random.randint(5, 10), 'name': name}}
        elif self.difficulty == 2:
            return {'fight_stats': {'hp': random.randint(30, 60), 'armor': random.randint(10, 35),
                                    'damage': random.randint(14, 30), 'aim': random.randint(10, 18), 'mag': mag_cap,
                                    'max_mag': mag_cap, 'fire_mods': fire_mods, 'cur_mod': random.choice(fire_mods)},
                    'stats': {'race_bonus': 0, 'streight': random.randint(10, 17), 'intel': random.randint(10, 17),
                              'motor': random.randint(10, 17), 'speed': random.randint(10, 17), 'name': name}}
        elif self.difficulty == 3:
            return {'fight_stats': {'hp': random.randint(40, 80), 'armor': random.randint(25, 60),
                                    'damage': random.randint(20, 45), 'aim': random.randint(20, 29), 'mag': mag_cap,
                                    'max_mag': mag_cap, 'fire_mods': fire_mods, 'cur_mod': random.choice(fire_mods)},
                    'stats': {'race_bonus': 0, 'streight': random.randint(20, 30), 'intel': random.randint(20, 34),
                              'motor': random.randint(30, 50), 'speed': random.randint(30, 40), 'name': name}}

    async def start_battle(self, guild, member):
        dil = {'fight_stats': {'hp': 4000, 'armor': 15, 'damage': 7, 'aim': 7, 'mag': 10, 'max_mag': 15,
                               'fire_mods': ['semi', 'pew - pew', 'auto'], 'cur_mod': 'semi'},
               'stats': {'race_bonus': 15, 'streight': 10, 'intel': 9, 'motor': 20, 'speed': 7, 'name': 'tester'}}

        enemy = []
        dif_to_count = {1: (1, 5), 2: (2, 4), 3: (1, 3)}
        diap = dif_to_count[self.difficulty]
        for i in range(random.randint(diap[0], diap[1])):
            enemy.append(Person(self.create_buddies()))
        print(member)
        channel_name = f"–∫–æ–º–Ω–∞—Ç–∞ {''.join(filter(str.isalnum, member.name))}"
        channel = get(guild.channels, name=channel_name)
        if channel:
            await channel.delete()
        channel = await guild.create_text_channel(channel_name, category=guild.categories[2])
        await channel.set_permissions(guild.default_role, send_messages=False, read_messages=False)
        await channel.set_permissions(member, send_messages=True, read_messages=True)
        start = Battle(channel)
        await start.add_persons([[Person(dil)], enemy])


class Battle:
    def __init__(self, channel):
        self.warriors = {'player': [], 'enemy': []}
        self.queue = 'Player'
        self.channel = channel

    async def add_persons(self, persons):
        self.warriors['player'] = persons[0]
        self.warriors['enemy'] = persons[1]
        await self.turn()

    @staticmethod
    async def win_lose(win):
        if win:
            print('–£—Ä–∞–ü–æ–±–µ–¥–∞')
        else:
            print('____')
            print('–ü–æ—Ä–∞–∂–µ–Ω–∏–µ')

    async def turn(self):
        od = 5
        more = True
        player = self.warriors['player'][0]
        await self.channel.send('**___–í–∞—à —Ö–æ–¥___**')
        while od != 0:
            fight_stats = await player.get_fight_stats()
            embed = discord.Embed(title=f"–í–∞—à–∏ –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏", color=discord.Colour.from_rgb(0, 255, 0))
            embed.add_field(name="**–í–∞—à–µ –û–ó**", value=fight_stats['hp'], inline=True)
            embed.add_field(name="**–í–∞—à–∞ –ó–∞—â–∏—Ç–∞**", value=fight_stats['armor'], inline=True)
            await self.channel.send(embed=embed, components=[[Button(style=ButtonStyle.red, label="–ê—Ç–∞–∫–æ–≤–∞—Ç—å"),
                Button(style=ButtonStyle.blue, label="–£–∫—Ä—ã—Ç—å—Å—è"),
                Button(style=ButtonStyle.green, label="–õ–µ—á–∏—Ç—å—Å—è"),
                Button(style=ButtonStyle.gray, label="–°–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º —Å—Ç—Ä–µ–ª—å–±—ã")]])
            a = a
            if action == 1:
                for elem in self.warriors['enemy']:
                    print(f'{self.warriors["enemy"].index(elem) + 1}) {elem.get_info()}')
                action = int(input())
                a = await self.attack(self.warriors['enemy'][action - 1], player)
                if a > 0:
                    print(f'–í—ã –Ω–∞–Ω–µ—Å–ª–∏ —É—Ä–æ–Ω –≤ —Ä–∞–∑–º–µ—Ä–µ {a} hp')
                    if self.warriors['enemy'][action - 1].get_fight_stats()['hp'] <= 0:
                        self.warriors['enemy'].remove(self.warriors['enemy'][action - 1])
                        if len(self.warriors['enemy']) == 0:
                            await self.win_lose(True)
                            more = False
                            break
                else:
                    print('–í—ã –Ω–µ —Å–º–æ–≥–ª–∏ –Ω–∞–Ω–µ—Å—Ç–∏ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫—É —É—Ä–æ–Ω')
                od -= 1
            elif action == 2:
                action = 1
                while action != 2 and od != 0:
                    a = await self.hide(player)
                    if a >= 0:
                        print(f'–í—ã —Å–ø—Ä—è—Ç–∞–ª–∏—Å—å, –≤–∞—à–∞ –∑–∞—â–∏—Ç–∞ —Å—Ç–∞–ª–∞ {a} –µ–¥–∏–Ω–∏—Ü')
                    else:
                        print('–í—ã –Ω–µ —Å–º–æ–≥–ª–∏ —Å–ø—Ä—è—Ç–∞—Ç—å—Å—è')
                    print('1) –°–º–µ–Ω–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é')
                    print('2) –û—Å—Ç–∞—Ç—å—Å—è')
                    od -= 1
                    action = input()
            elif action == 3:
                if self.warriors['player'][0].get_fight_stats()['mag'] == \
                        self.warriors['player'][0].get_fight_stats()['max_mag']:
                    print('–ü–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è')
                else:
                    base_motor = 15 + player.get_stats()['motor']
                    action = 1
                    while action != 2 and od != 0:
                        a = random.randint(1, 100)
                        if a <= base_motor:
                            action = 2
                            player.reload()
                            print(player.get_fight_stats()['mag'])
                            print('–í—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∏–ª–∏ –æ—Ä—É–∂–∏–µ')
                        else:
                            print('–í—ã –Ω–µ —Å–º–æ–≥–ª–∏ –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∏—Ç—å –æ—Ä—É–∂–∏–µ')
                            print('1) –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É')
                            print('2) –û—Å—Ç–∞–≤–∏—Ç—å')
                            action = input()
                        od -= 1

            elif action == '4':
                heal = 15 + random.randint(1, player.get_stats()['intel'] // 2)
                print(f'–í—ã –≤–æ—Å–ø–æ–ª–Ω–∏–ª–∏ —Å–≤–æ—ë –∑–¥–æ—Ä–æ–≤—å–µ –Ω–∞ {heal} hp')
                player.heal(heal)
                od -= 1
            elif action == '5':
                print(player.change_mode())
        if more:
            print('___—Ö–æ–¥ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞___')
        for elem in self.warriors['enemy']:
            print(f'__ {elem.get_stats()["name"]} __')
            od = 5
            warrior = elem
            heal_point, hide_point, armor_point, min_mag = warrior.get_static_fight_stats()
            while od >= 1:
                warrior_stats = warrior.get_fight_stats()
                if (warrior_stats['hp'] < hide_point and warrior_stats['armor'] >= armor_point) or \
                        warrior_stats['hp'] < heal_point:
                    heal = 4 + random.randint(1, warrior.get_stats()['intel'] // 2)
                    print(f'–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –≤–æ—Å–ø–æ–ª–Ω–∏–ª —Å–≤–æ—ë –∑–¥–æ—Ä–æ–≤—å–µ –Ω–∞ {heal} hp')
                    warrior.heal(heal)
                    od -= 1
                elif warrior_stats['hp'] < hide_point and warrior_stats['armor'] <= armor_point:
                    print('—â–∞ –∫–∞–∫ —Å–Ω—ã–∫–∞—é—Å—å')
                    a = await self.hide(warrior)
                    if a >= 0:
                        print(f'–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ —Å–ø—Ä—è—Ç–∞–ª—Å—è, –µ–≥–æ –∑–∞—â–∏—Ç–∞ –≤–æ–∑—Ä–æ—Å–ª–∞ –Ω–∞ {a} –µ–¥–∏–Ω–∏—Ü')
                    else:
                        print('–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –Ω–µ —Å–º–æ–≥ —Å–ø—Ä—è—Ç–∞—Ç—å—Å—è')
                    od -= 1
                elif warrior_stats['mag'] <= min_mag:
                    print('–ü–ï–†–ï–ó–ê–†–Ø–ñ–ê–Æ–°–¨')
                    if warrior_stats['mag'] != warrior_stats['max_mag']:
                        base_motor = 15 + warrior.get_stats()['motor']
                        a = random.randint(1, 100)
                        if a <= base_motor:
                            warrior.reload()
                            print('–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∏–ª –æ—Ä—É–∂–∏–µ')
                        else:
                            print('–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –Ω–µ —Å–º–æ–≥ –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∏—Ç—å –æ—Ä—É–∂–∏–µ')
                        od -= 1
                else:
                    print('–ü–∏–∑–¥–∞ —Ç–µ–±–µ –∫–∞–ø—á—ë–Ω—ã–π')
                    dealed_damage = await self.attack(self.warriors['player'][0], warrior)
                    if dealed_damage > 0:
                        print(f'–í–∞–º –Ω–∞–Ω–µ—Å–ª–∏ —É—Ä–æ–Ω –≤ —Ä–∞–∑–º–µ—Ä–µ {dealed_damage} hp')
                        if player.get_fight_stats()['hp'] <= 0:
                            await self.win_lose(False)
                            more = False
                            break
                    od -= 1

            if not more:
                break
            print('____')
        if more:
            await self.turn()

    @staticmethod
    async def hide(warrior):
        base_speed = 15 + warrior.get_stats()['speed']
        arm_bonus = {'field': 0, 'tree': 15, 'rock': 20, 'baricade': 30}
        a = random.randint(1, 100)
        if a <= base_speed:
            hide = random.choice(('field', 'tree', 'rock', 'baricade'))
            warrior.add_get_clear_bonus('add', 'armor+', arm_bonus[hide])
            return arm_bonus[hide] + warrior.get_fight_stats()['armor']
        else:
            return 0

    @staticmethod
    async def attack(target, warrior):
        base_aim = 30
        fire_mode = warrior.get_fight_stats()['cur_mod']
        mag = warrior.get_fight_stats()['mag']
        play_damage = warrior.get_fight_stats()['damage']
        play_aim = warrior.get_fight_stats()['aim']
        en_armor = target.get_fight_stats()['armor']
        total_damage = 0
        if 'aim+' in warrior.add_get_clear_bonus('get'):
            base_aim += warrior.add_get_clear_bonus('get')['aim+']
        if fire_mode == 'semi' and mag >= 1:
            shoots = 1
            warrior.shoot(1)
        elif fire_mode == 'pew - pew' and mag >= 3:
            warrior.shoot(3)
            shoots = 3
            base_aim -= 20
        elif fire_mode == 'auto' and mag >= 10:
            warrior.shoot(10)
            shoots = 10
            base_aim -= 25
        else:
            print('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞—Ç—Ä–æ–Ω–æ–≤')
            shoots = 0
        for i in range(shoots):
            if random.randint(1, 100) <= base_aim + play_aim and play_damage > en_armor * 0.01:
                target.get_hurt(play_damage - en_armor * 0.01)
                warrior.add_get_clear_bonus('clear', 'aim+')
                total_damage += play_damage - en_armor * 0.01
            else:
                warrior.add_get_clear_bonus('add', 'aim+', 10)

        return total_damage


class Person:
    def __init__(self, stats={}):
        if stats == {}:
            self.stats = {'fight_stats': {'hp': 0, 'armor': 0, 'damage': 0, 'aim': 0, 'mag': 0, 'max_mag': 0,
                                          'fire_mods': [], 'cur_mod': ''},
                          'stats': {'race_bonus': 0, 'streight': 0, 'intel': 0, 'motor': 0, 'speed': 0, 'name': ''}}
        else:
            self.stats = stats
        self.static_stats = stats
        self.bonuses = {}

    async def load_person(self, stats):
        self.stats = stats

    async def get_hurt(self, damage):
        self.stats['fight_stats']['hp'] = round((self.stats['fight_stats']['hp'] - damage), 2)

    async def get_info(self):
        info = str(self.stats["fight_stats"]["hp"]), str(self.stats["fight_stats"]["armor"]), \
               str(self.stats["fight_stats"]["damage"])
        return f'{self.stats["stats"]["name"]} [{" ".join(info)}]'

    async def get_fight_stats(self):
        return self.stats['fight_stats']

    async def get_static_fight_stats(self):
        mode_to_minimum = {'auto': 10, 'pew - pew': 3, 'semi': 1}
        hide_hp = self.static_stats['fight_stats']['hp'] - self.static_stats['fight_stats']['hp'] / 3
        heal_hp = self.static_stats['fight_stats']['hp'] - self.static_stats['fight_stats']['hp'] / 4
        mininmum_ammo_amount = mode_to_minimum[self.static_stats['fight_stats']['cur_mod']]
        armor = self.static_stats['fight_stats']['armor'] + self.static_stats['fight_stats']['armor'] * 0.03
        return hide_hp, heal_hp, armor, mininmum_ammo_amount

    async def get_stats(self):
        return self.stats['stats']

    async def reload(self):
        self.stats['fight_stats']['mag'] = self.stats['fight_stats']['max_mag']

    async def heal(self, heal):
        self.stats['fight_stats']['hp'] = round((self.stats['fight_stats']['hp'] + heal), 2)

    async def shoot(self, amount):
        self.stats['fight_stats']['mag'] -= amount

    async def change_mode(self):
        avalible_mods = self.stats['fight_stats']['fire_mods']
        cur_mod = self.stats['fight_stats']['cur_mod']
        if avalible_mods.index(cur_mod) + 1 >= len(avalible_mods):
            cur_mod = avalible_mods[0]
        else:
            cur_mod = avalible_mods[avalible_mods.index(cur_mod) + 1]
        self.stats['fight_stats']['cur_mod'] = cur_mod
        return cur_mod

    async def add_get_clear_bonus(self, *args):
        to_do = args[0]
        if len(args) > 1:
            name = args[1]
            if to_do == 'add':
                num = args[2]
                if name in self.bonuses:
                    self.bonuses[name] += num
                else:
                    self.bonuses[name] = num
            if to_do == 'clear':
                if name in self.bonuses:
                    self.bonuses[name] = 0
        elif to_do == 'get':
            return self.bonuses

"""
====================================================================================================================
=============================================== –†–ê–ó–î–ï–õ –° –ú–ò–ù–ò-–ò–ì–†–ê–ú–ò ===============================================
====================================================================================================================
"""

"""
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- –ö–†–ï–°–¢–ò–ö–ò-–ù–û–õ–ò–ö–ò -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
"""


@slash.slash(
    name="tic_tac_toe",
    description="–°—ã–≥—Ä–∞—Ç—å –≤ \"–ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏\".",
    options=[{"name": "member", "description": "–ò–≥—Ä–æ–∫, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã –≤—ã–∑—ã–≤–∞–µ—Ç–µ –Ω–∞ –±–æ–π.", "type": 6, "required": True}],
    guild_ids=test_servers_id
)
@commands.has_role("–ò–≥—Ä–æ–∫")
async def send_invite_tic_tac_toe(ctx, member):
    if member.bot:
        raise IncorrectUser("- –° –±–æ—Ç–æ–º –∏–≥—Ä–∞—Ç—å –Ω–µ–ª—å–∑—è!")
    msg = await ctx.send(f"**–ö–†–ï–°–¢–ò–ö–ò-–ù–û–õ–ò–ö–ò**\n*| {member.name}! –í–∞—Å –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç {ctx.author.name} "
                         f"—Å—ã–≥—Ä–∞—Ç—å –≤ –∫—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏!* __*–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ ‚úÖ.*__\n"
                         f"||{member.mention}{ctx.author.mention}||")
    await msg.add_reaction("‚úÖ")


async def first_send_tic_tac_toe(channel, members1, members2):
    # –†–∞–Ω–¥–æ–º–Ω—ã–π –≤—ã–±–æ—Ä —Ç–æ–≥–æ –∫—Ç–æ –±—É–¥–µ—Ç –∑–∞ "–∫—Ä–µ—Å—Ç–∏–∫–∏"
    cross_and_zero = [members1, members2]
    random.shuffle(cross_and_zero)
    # –°–æ–æ–±—â–µ–Ω–∏–µ-–ø–æ–ª–µ –∏–≥—Ä—ã   |   (‚ùå or ‚≠ï | embed.set_footer(text=f""))
    embed = discord.Embed(title=f"**<<= –ö–†–ï–°–¢–ò–ö–ò-–ù–û–õ–ò–ö–ò =>>**", color=44444)
    embed.add_field(name="**. ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ .**", value=f"*–•–æ–¥–∏—Ç: {cross_and_zero[0]}*", inline=False)
    text = f"**‚ñ´„Ä∞{'üî≤'}„Ä∞ | „Ä∞{'üî≤'}„Ä∞ | „Ä∞{'üî≤'}„Ä∞‚ñ´**\n" \
           f"**. ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ .**\n" \
           f"**‚ñ´„Ä∞{'üî≤'}„Ä∞ | „Ä∞{'üî≤'}„Ä∞ | „Ä∞{'üî≤'}„Ä∞‚ñ´**\n" \
           f"**. ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ .**\n" \
           f"**‚ñ´„Ä∞{'üî≤'}„Ä∞ | „Ä∞{'üî≤'}„Ä∞ | „Ä∞{'üî≤'}„Ä∞‚ñ´**\n" \
           f"**. ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ .**"
    embed.add_field(name="**. ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ .**", value=text, inline=False)
    embed.set_footer(text=f"–ö—Ä–µ—Å—Ç–∏–∫–∏: {cross_and_zero[0]}; –ù–æ–ª–∏–∫–∏: {cross_and_zero[1]}")

    msg = await channel.send(embed=embed)

    for i in range(1, 10):
        await msg.add_reaction(numbers_emoji[i])


"""
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- –ö–ê–ú–ï–ù–¨ - –ù–û–ñ–ù–ò–¶–´ - –ë–£–ú–ê–ì–ê -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
"""


@slash.slash(
    name="rock_paper_scissors",
    description="–°—ã–≥—Ä–∞—Ç—å –≤ \"–ö–∞–º–µ–Ω—å-–Ω–æ–∂–Ω–∏—Ü—ã-–±—É–º–∞–≥–∞\".",
    guild_ids=test_servers_id
)
@commands.has_role("–ò–≥—Ä–æ–∫")
async def rock_paper_scissors(ctx):
    pass


"""
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- –ü–û–ö–ï–† -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
"""


@slash.slash(
    name="poker_help",
    description="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∞–≤–∏–ª–∞—Ö –∏–≥—Ä—ã –ø–æ–∫–µ—Ä –∏ –æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏ —Å –±–æ—Ç–æ–º.",
    guild_ids=test_servers_id
)
@commands.has_role("–ò–≥—Ä–æ–∫")
async def poker_help(ctx):
    pass


@slash.slash(
    name="start_poker_session",
    description="–ù–∞—á–∞—Ç—å –∏–≥—Ä—É –≤ –ø–æ–∫–µ—Ä.",
    options=[{"name": "members", "description": "–ò–≥—Ä–æ–∫–∏, —É—á–∞—Å—Ç–≤—É—é—â–∏–µ –≤ –∏–≥—Ä–µ. –°–æ–≤–µ—Ç! –ü—Ä–æ—Å—Ç–æ —É–ø–æ–º–µ–Ω–∏—Ç–µ –≤—Å–µ—Ö "
                                                "–∏–≥—Ä–æ–∫–æ–≤ –≤ –ø–æ–∫–µ—Ä (–æ—Ç 2 –¥–æ 5 —á–µ–ª–æ–≤–µ–∫)", "type": 3, "required": True},
             {"name": "bet", "description": "–ü–ª–∞—Ç–∞ –∑–∞ –≤—Ö–æ–¥ –≤ –∏–≥—Ä—É –∏ —Ä–∞–∑–º–µ—Ä "
                                            "–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–π —Å—Ç–∞–≤–∫–∏ (–º–∏–Ω–∏–º—É–º - 10)", "type": 4, "required": True}],
    guild_ids=test_servers_id
)
@commands.has_role("–ò–≥—Ä–æ–∫")
async def start_poker_session(ctx, members, bet):
    guild = ctx.guild
    raw_member_data = members.split("><")
    members = [guild.get_member(await clean_member_id(member_id)) for member_id in raw_member_data]

    if ctx.author not in members:
        members.append(ctx.author)

    if "—Ç–∞–≤–µ—Ä–Ω–∞" not in ctx.channel.name:
        raise ChannelNameError(f"- –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —Ç–∞–≤–µ—Ä–Ω–∞—Ö —Ä–∞–∑–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤.\n"
                               f"–í –∫–∞–Ω–∞–ª–µ {ctx.channel} —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ–ª—å–∑—è!")
    if not 2 <= len(members) <= 5:
        raise IncorrectMemberAmount(f"- –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤!\n"
                                    f"–î–ª—è –∏–≥—Ä—ã –≤ –ø–æ–∫–µ—Ä –Ω—É–∂–Ω–æ –æ—Ç 2 –¥–æ 5 —á–µ–ª–æ–≤–µ–∫. –£ –≤–∞—Å - {len(members)}.")

    for member in members:
        if member.bot:
            raise IncorrectUser(f"- –í—ã–±—Ä–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.\n{member.name} - –±–æ—Ç!")
        if get(guild.roles, name="–ò–≥—Ä–æ–∫") not in member.roles:
            raise IncorrectUser(f"- –í—ã–±—Ä–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.\n–£ {member.name} –Ω–µ—Ç —Ä–æ–ª–∏ \"–ò–≥—Ä–æ–∫\"!")

    user_balance = db_sess.query(User).filter(User.id == f"{ctx.author.id}-{guild.id}").first().balance
    if bet < 10:
        raise IncorrectBetAmount(f"- –ù–µ–ª—å–∑—è —Å—Ç–∞–≤–∏—Ç—å —Å—Ç–∞–≤–∫—É, –∫–æ—Ç–æ—Ä–∞—è –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π (10 Gaudium)")
    if bet > user_balance:
        raise IncorrectBetAmount(f"- –°—Ç–∞–≤–∫–∞ {bet} Gaudium –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–∏–º–µ–Ω–µ–Ω–∞, "
                                 f"—Ç–∞–∫ –∫–∞–∫ —É –í–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–π —Å—É–º–º—ã.\n"
                                 f"–í–∞—à –±–∞–ª–∞–Ω—Å: {user_balance} Gaudium")

    channel_name = f"poker-lobby-{''.join(filter(str.isalnum, ctx.author.name))}".lower()
    channel = get(guild.channels, name=channel_name)
    if channel:
        await channel.delete()

    channel = await guild.create_text_channel(channel_name, category=ctx.channel.category)

    await channel.set_permissions(guild.default_role, send_messages=False, read_messages=False)
    for member in members:
        await channel.set_permissions(member, send_messages=True, read_messages=True)

    games_history = json.load(open("game_data/games_history.json"))
    games_history[str(channel.id)] = 0

    members_list = "\n".join([member.mention for member in members])
    value_emoji = client.get_emoji(emoji["money"])
    await ctx.send(f"–õ–æ–±–±–∏ {channel.mention} —Å–æ–∑–¥–∞–Ω–æ.\n"
                   f"{members_list}")
    message = await channel.send(f"**–ñ–î–Å–ú –ù–ê–ß–ê–õ–ê –ò–ì–†–´!**\n"
                                 f"–ß—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ –ø–∞—Ä—Ç–∏–∏ –ø–æ–∫–µ—Ä–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ‚úÖ\n"
                                 f"*NB! –î–ª—è –∏–≥—Ä—ã, –Ω—É–∂–Ω–æ –∏–º–µ—Ç—å, –º–∏–Ω–∏–º—É–º {bet} {value_emoji}*\n"
                                 f"**__–¢–µ–∫—É—â–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏:__**\n"
                                 f"·≤º·≤º·≤º–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç :(")
    await message.add_reaction("‚úÖ")
    await message.pin()

    await commit_changes(games_history, "game_data/games_history.json")


@client.command()
@commands.has_role("–ò–≥—Ä–æ–∫")
async def play(ctx):
    guild = ctx.guild
    channel = ctx.channel
    pins = await channel.pins()
    message_text = pins[-1].content

    games_history = json.load(open("game_data/games_history.json"))

    bet = int(message_text.split("\n")[2].split()[6])
    members_ids = [await clean_member_id(member.split("  ")[-1]) for member in message_text.split("\n")[4:]]
    members = [guild.get_member(member_id) for member_id in members_ids]
    value_emoji = client.get_emoji(emoji["money"])

    games_count = games_history[str(channel.id)]
    dealer_id = games_count if games_count < len(members) else games_count % len(members)
    dealer = members[dealer_id]

    small_blind_id = dealer_id + 1 if dealer_id + 1 < len(members) else (dealer_id + 1) % len(members)
    blind_id = dealer_id + 2 if dealer_id + 2 < len(members) else (dealer_id + 2) % len(members)

    db_sess.query(User).filter(User.id == f"{members_ids[small_blind_id]}-{guild.id}").first().balance -= bet // 2
    db_sess.query(User).filter(User.id == f"{members_ids[blind_id]}-{guild.id}").first().balance -= bet

    embed = discord.Embed(title=f"–ü–∞—Ä—Ç–∏—è –≤ –ø–æ–∫–µ—Ä –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ", color=0x99d98c)

    members_text = await get_formatted_players(members, guild.id, value_emoji)

    embed.add_field(name="\u200b", value="\n\n".join(members_text[0]), inline=True)
    embed.add_field(name="\u200b", value="\u200b", inline=True)
    embed.add_field(name="\u200b", value="\n\n".join(members_text[1]), inline=True)

    embed.add_field(name="\u200b",
                    value=f"**–î–∏–ª–µ—Ä:**\n"
                          f"{dealer_id + 1}.\t{dealer}\n\n"
                          f"**–°–µ–π—á–∞—Å —Ö–æ–¥–∏—Ç:**\n"
                          f"–ù–∏–∫—Ç–æ –Ω–µ —Ö–æ–¥–∏—Ç.\n"
                          f"(–û–∂–∏–¥–∞–Ω–∏–µ —Ä–∞–∑–¥–∞—á–∏ –∫–∞—Ä—Ç)",
                    inline=True)
    embed.add_field(name="\u200b", value="\u200b", inline=True)
    embed.add_field(name="\u200b",
                    value=f"**–û–±—â–∏–π –∫—É—à:**\n"
                          f"{round(1.5 * bet)} {value_emoji}\n\n"
                          f"**–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞:**\n"
                          f"{round(bet)} {value_emoji}",
                    inline=True)

    embed.add_field(name="\u200b", value="**–û—Ç–∫—Ä—ã—Ç—ã–µ –∫–∞—Ä—Ç—ã:**\n"
                                         "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç", inline=True)
    embed.add_field(name="\u200b", value=f"**–ü–æ—Å–ª–µ–¥–Ω–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:**\n"
                                         f"–°–æ–±—Ä–∞–Ω—ã –±–ª–∞–π–Ω–¥—ã —Å –∏–≥—Ä–æ–∫–æ–≤:\n"
                                         f"  {members[small_blind_id]}\n"
                                         f"  {members[blind_id]}", inline=True)

    # await pins[0].unpin()
    message = await ctx.send(embed=embed,
                             components=[Button(style=ButtonStyle.green, label="–ù–∞—á–∞—Ç—å —Ä–∞–∑–¥–∞—á—É")])
    await message.pin()

    active_players = json.load(open("game_data/active_players.json", encoding="utf8"))

    games_history[str(channel.id)] += 1
    active_players[str(message.id)] = {}
    for member_id in members_ids:
        active_players[str(message.id)][member_id] = {"deck": [], "bet": 0, "action": ""}

    await commit_changes(games_history, "game_data/games_history.json")
    await commit_changes(active_players, "game_data/active_players.json")
    db_sess.commit()


@client.command(name="bet")
@commands.has_role("–ò–≥—Ä–æ–∫")
async def _bet(ctx, bet_amount):
    current_game_data = await get_current_game_data(ctx)

    if current_game_data["current_player"].id != ctx.author.id:
        raise IncorrectUser("- –°–µ–π—á–∞—Å –Ω–µ –í–∞—à–∞ –æ—á–µ—Ä–µ–¥—å —Ö–æ–¥–∏—Ç—å!")
    if current_game_data["current_player_id"] != 1:
        raise IncorrectGameAction("- –ö–æ–º–∞–Ω–¥—É /bet –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –ø–µ—Ä–≤—ã–π —Ö–æ–¥ —Ä–∞—É–Ω–¥–∞!")

    all_active_players = json.load(open("game_data/active_players.json", encoding="utf8"))
    active_players = all_active_players[str(current_game_data["message"].id)]

    guild = ctx.guild

    new_min_bet = current_game_data["min_bet"]
    player_bet = int(bet_amount) if int(bet_amount) >= new_min_bet else new_min_bet
    new_min_bet = player_bet

    user = db_sess.query(User).filter(User.id == f"{ctx.author.id}-{guild.id}").first()
    action = f"{ctx.author} —Å–¥–µ–ª–∞–ª bet –Ω–∞ {player_bet} {client.get_emoji(emoji['money'])}"

    all_active_players[str(current_game_data["message"].id)][str(ctx.author.id)]["bet"] = player_bet
    all_active_players[str(current_game_data["message"].id)][str(ctx.author.id)]["action"] = "bet"

    if player_bet >= user.balance:
        action = f"{ctx.author} –ø–æ—à—ë–ª –≤ all-in!"
        player_bet = user.balance
        all_active_players[str(current_game_data["message"].id)][str(ctx.author.id)]["action"] = "all-in"

    user.balance -= player_bet

    next_player_id, next_player = await get_next_player(current_game_data["min_bet"], active_players, guild)
    new_game_data = {
        "next_player": next_player,
        "next_player_id": next_player_id,
        "max_player_id": current_game_data["max_player_id"],
        "new_pot": current_game_data["pot"] + player_bet,
        "new_min_bet": new_min_bet,
        "last_action": action
    }

    db_sess.commit()
    await commit_changes(all_active_players, "game_data/active_players.json")
    await commit_game_changes(current_game_data["message"], new_game_data, guild)


@client.command()
@commands.has_role("–ò–≥—Ä–æ–∫")
async def call(ctx):
    current_game_data = await get_current_game_data(ctx)

    if current_game_data["current_player"].id != ctx.author.id:
        raise IncorrectUser("- –°–µ–π—á–∞—Å –Ω–µ –í–∞—à–∞ –æ—á–µ—Ä–µ–¥—å —Ö–æ–¥–∏—Ç—å!")

    all_active_players = json.load(open("game_data/active_players.json", encoding="utf8"))
    active_players = all_active_players[str(current_game_data["message"].id)]

    guild = ctx.guild
    player_bet = current_game_data["min_bet"]
    new_min_bet = player_bet

    user = db_sess.query(User).filter(User.id == f"{ctx.author.id}-{guild.id}").first()
    action = f"{ctx.author} –ø–æ–¥–¥–µ—Ä–∂–∞–ª —Å—Ç–∞–≤–∫—É {player_bet} {client.get_emoji(emoji['money'])}"

    all_active_players[str(current_game_data["message"].id)][str(ctx.author.id)]["bet"] = player_bet
    all_active_players[str(current_game_data["message"].id)][str(ctx.author.id)]["action"] = "bet"

    if player_bet >= user.balance:
        action = f"{ctx.author} –ø–æ—à—ë–ª –≤ all-in!"
        player_bet = user.balance
        all_active_players[str(current_game_data["message"].id)][str(ctx.author.id)]["action"] = "all-in"

    user.balance -= player_bet

    next_player_id, next_player = await get_next_player(current_game_data["min_bet"], active_players, guild)
    new_game_data = {
        "next_player": next_player,
        "next_player_id": next_player_id,
        "max_player_id": current_game_data["max_player_id"],
        "new_pot": current_game_data["pot"] + player_bet,
        "new_min_bet": new_min_bet,
        "last_action": action
    }

    db_sess.commit()
    await commit_game_changes(current_game_data["message"], new_game_data, guild)


@client.command()
@commands.has_role("–ò–≥—Ä–æ–∫")
async def fold(ctx):
    current_game_data = await get_current_game_data(ctx)

    if current_game_data["current_player"].id != ctx.author.id:
        raise IncorrectUser("- –°–µ–π—á–∞—Å –Ω–µ –í–∞—à–∞ –æ—á–µ—Ä–µ–¥—å —Ö–æ–¥–∏—Ç—å!")

    guild = ctx.guild
    action = f"{ctx.author} –≤—ã—à–µ–ª –∏–∑ –∏–≥—Ä—ã"

    all_active_players = json.load(open("game_data/active_players.json", encoding="utf8"))
    active_players = all_active_players[str(current_game_data["message"].id)]
    active_players_ids = list(all_active_players[str(current_game_data["message"].id)].keys())
    current_player = active_players_ids[current_game_data["current_player_id"] - 1]

    if len(active_players_ids) - 1 == 1:
        await poker_win(ctx)
        return

    next_player_id, next_player = await get_next_player(current_game_data["min_bet"], active_players, guild)
    new_game_data = {
        "next_player": next_player,
        "next_player_id": next_player_id,
        "max_player_id": current_game_data["max_player_id"] - 1,
        "new_pot": current_game_data["pot"],
        "new_min_bet": current_game_data["min_bet"],
        "last_action": action
    }

    del all_active_players[str(current_game_data["message"].id)][current_player]

    db_sess.commit()
    await commit_changes(all_active_players, "game_data/active_players.json")
    await commit_game_changes(current_game_data["message"], new_game_data, guild)


@client.command()
@commands.has_role("–ò–≥—Ä–æ–∫")
async def all_in(ctx):
    current_game_data = await get_current_game_data(ctx)

    if current_game_data["current_player"].id != ctx.author.id:
        raise IncorrectUser("- –°–µ–π—á–∞—Å –Ω–µ –í–∞—à–∞ –æ—á–µ—Ä–µ–¥—å —Ö–æ–¥–∏—Ç—å!")

    all_active_players = json.load(open("game_data/active_players.json", encoding="utf8"))
    active_players = all_active_players[str(current_game_data["message"].id)]

    guild = ctx.guild
    user = db_sess.query(User).filter(User.id == f"{ctx.author.id}-{guild.id}").first()
    player_bet = user.balance

    action = f"{ctx.author} –ø–æ—à—ë–ª –≤ all-in!"
    user.balance = 0

    all_active_players[str(current_game_data["message"].id)][str(ctx.author.id)]["bet"] = player_bet
    all_active_players[str(current_game_data["message"].id)][str(ctx.author.id)]["action"] = "all-in"

    next_player_id, next_player = await get_next_player(current_game_data["min_bet"], active_players, guild)
    new_game_data = {
        "next_player": next_player,
        "next_player_id": next_player_id,
        "max_player_id": current_game_data["max_player_id"],
        "new_pot": current_game_data["pot"] + player_bet,
        "new_min_bet": player_bet,
        "last_action": action
    }

    db_sess.commit()
    await commit_changes(all_active_players, "game_data/active_players.json")
    await commit_game_changes(current_game_data["message"], new_game_data, guild)


@client.command()
@commands.has_role("–ò–≥—Ä–æ–∫")
async def check(ctx):
    current_game_data = await get_current_game_data(ctx)

    if current_game_data["current_player"].id != ctx.author.id:
        raise IncorrectUser("- –°–µ–π—á–∞—Å –Ω–µ –í–∞—à–∞ –æ—á–µ—Ä–µ–¥—å —Ö–æ–¥–∏—Ç—å!")

    all_active_players = json.load(open("game_data/active_players.json", encoding="utf8"))
    active_players = all_active_players[str(current_game_data["message"].id)]

    previous_bet = active_players[str(current_game_data["current_player_id"] - 2)]["bet"]
    players_bet = active_players[str(current_game_data["current_player_id"] - 1)]["bet"]
    if previous_bet != players_bet:
        raise IncorrectGameAction(f"- –ö–æ–º–∞–Ω–¥—É /check –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å, –µ—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç–∞–≤–∫–∞ —Ä–∞–≤–Ω–∞ –í–∞—à–µ–π!\n"
                                  f"–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ - {players_bet} Gaudium –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è "
                                  f"—ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω—É–∂–Ω–æ - {previous_bet} Gaudium")

    guild = ctx.guild

    action = f"{ctx.author} –ø—Ä–æ–ø—É—Å—Ç–∏–ª —Ö–æ–¥"
    all_active_players[str(current_game_data["message"].id)][str(ctx.author.id)]["action"] = "check"

    next_player_id, next_player = await get_next_player(current_game_data["min_bet"], active_players, guild)
    new_game_data = {
        "next_player": next_player,
        "next_player_id": next_player_id,
        "max_player_id": current_game_data["max_player_id"],
        "new_pot": current_game_data["pot"],
        "new_min_bet": current_game_data["min_bet"],
        "last_action": action
    }

    await commit_changes(all_active_players, "game_data/active_players.json")
    await commit_game_changes(current_game_data["message"], new_game_data, guild)


@client.command(name="raise")
@commands.has_role("–ò–≥—Ä–æ–∫")
async def _raise(ctx, raise_amount):
    current_game_data = await get_current_game_data(ctx)

    if current_game_data["current_player"].id != ctx.author.id:
        raise IncorrectUser("- –°–µ–π—á–∞—Å –Ω–µ –í–∞—à–∞ –æ—á–µ—Ä–µ–¥—å —Ö–æ–¥–∏—Ç—å!")

    all_active_players = json.load(open("game_data/active_players.json", encoding="utf8"))
    active_players = all_active_players[str(current_game_data["message"].id)]

    guild = ctx.guild

    new_min_bet = current_game_data["min_bet"]
    player_raise = int(raise_amount) if int(raise_amount) >= new_min_bet * 2 else new_min_bet * 2
    new_min_bet = player_raise

    user = db_sess.query(User).filter(User.id == f"{ctx.author.id}-{guild.id}").first()
    action = f"{ctx.author} –ø–æ–≤—ã—Å–∏–ª —Å—Ç–∞–≤–∫—É –Ω–∞ {player_raise} {client.get_emoji(emoji['money'])}"

    all_active_players[str(current_game_data["message"].id)][str(ctx.author.id)]["bet"] = player_raise
    all_active_players[str(current_game_data["message"].id)][str(ctx.author.id)]["action"] = "raise"

    if player_raise >= user.balance:
        action = f"{ctx.author} –ø–æ—à—ë–ª –≤ all-in!"
        player_raise = user.balance
        all_active_players[str(current_game_data["message"].id)][str(ctx.author.id)]["action"] = "all-in"

    user.balance -= player_raise

    changed_players_amount = await get_all_next_players(new_min_bet, active_players)
    next_player_id, next_player = await get_next_player(new_min_bet, active_players, guild)
    new_game_data = {
        "next_player": next_player,
        "next_player_id": next_player_id,
        "max_player_id": current_game_data["max_player_id"] + changed_players_amount,
        "new_pot": current_game_data["pot"] + player_raise,
        "new_min_bet": new_min_bet,
        "last_action": action
    }

    db_sess.commit()
    await commit_changes(all_active_players, "game_data/active_players.json")
    await commit_game_changes(current_game_data["message"], new_game_data, guild)


@client.command()
@commands.has_role("–ò–≥—Ä–æ–∫")
async def reraise(ctx, raise_amount):
    current_game_data = await get_current_game_data(ctx)

    if current_game_data["current_player"].id != ctx.author.id:
        raise IncorrectUser("- –°–µ–π—á–∞—Å –Ω–µ –í–∞—à–∞ –æ—á–µ—Ä–µ–¥—å —Ö–æ–¥–∏—Ç—å!")

    all_active_players = json.load(open("game_data/active_players.json", encoding="utf8"))
    active_players = all_active_players[str(current_game_data["message"].id)]

    if active_players[str(current_game_data["current_player_id"] - 2)]["action"] != "raise":
        raise IncorrectGameAction("- –ö–æ–º–∞–Ω–¥—É /reraise –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ /raise")

    guild = ctx.guild

    new_min_bet = current_game_data["min_bet"]
    player_raise = int(raise_amount) if int(raise_amount) >= new_min_bet * 2 else new_min_bet * 2
    new_min_bet = player_raise

    user = db_sess.query(User).filter(User.id == f"{ctx.author.id}-{guild.id}").first()
    action = f"{ctx.author} –ø–æ–≤—ã—Å–∏–ª —Å—Ç–∞–≤–∫—É –Ω–∞ {player_raise} {client.get_emoji(emoji['money'])}"

    all_active_players[str(current_game_data["message"].id)][str(ctx.author.id)]["bet"] = player_raise
    all_active_players[str(current_game_data["message"].id)][str(ctx.author.id)]["action"] = "reraise"

    if player_raise >= user.balance:
        action = f"{ctx.author} –ø–æ—à—ë–ª –≤ all-in!"
        player_raise = user.balance
        all_active_players[str(current_game_data["message"].id)][str(ctx.author.id)]["action"] = "all-in"

    user.balance -= player_raise

    changed_players_amount = await get_all_next_players(new_min_bet, active_players)
    next_player_id, next_player = await get_next_player(new_min_bet, active_players, guild)
    new_game_data = {
        "next_player": next_player,
        "next_player_id": next_player_id,
        "max_player_id": current_game_data["max_player_id"] + changed_players_amount,
        "new_pot": current_game_data["pot"] + player_raise,
        "new_min_bet": new_min_bet,
        "last_action": action
    }

    db_sess.commit()
    await commit_changes(all_active_players, "game_data/active_players.json")
    await commit_game_changes(current_game_data["message"], new_game_data, guild)


@client.command()
async def leave(ctx):
    await ctx.channel.set_permissions(ctx.author, send_messages=False, read_messages=False)


async def poker_win(ctx):
    pass


async def get_all_next_players(current_bet, members_data):
    next_players = []
    for member_data in members_data.values():
        if member_data["bet"] < current_bet and member_data["action"] != "all-in":
            next_players.append("player")

    return len(next_players)


async def get_next_player(current_bet, members_data, guild):
    next_player = None
    next_player_id = -1
    for member_id, member_data in members_data.items():
        if member_data["bet"] < current_bet and member_data["action"] != "all-in":
            next_player_id = list(members_data.keys()).index(next_player_id) + 1
            next_player = guild.get_member(member_id)
            break

    return next_player_id, next_player


async def get_formatted_players(members, guild_id, value_emoji):
    members_text = [[], []]
    member_pos = 1
    column = 0
    for member in members:
        balance = db_sess.query(User).filter(User.id == f"{member.id}-{guild_id}").first().balance
        members_text[column].append(f"**{member_pos}.\t{member.name}:**\n"
                                    f"–ë–∞–ª–∞–Ω—Å:\t{balance} {value_emoji}")
        if member_pos == len(members) % 2 + len(members) // 2:
            column += 1
        member_pos += 1

    return members_text


async def start_new_round(round_num, message):
    deck = DeckOfCards()
    deck.cards = json.load(open("game_data/active_card_decks.json", encoding="utf8"))[str(message.id)]
    embed = message.embeds[0]

    amount_to_take = 3 if round_num == 2 else 1
    text_cards = []
    for card_info in await deck.take(amount_to_take):
        value, suit = card_info.split(" - ")
        text_cards.append(f"{value} {client.get_emoji(playing_cards_emoji[suit])}")
    text_cards = "\n".join(text_cards)

    embed.set_field_at(6, name="\u200b",
                       value=f"**–û—Ç–∫—Ä—ã—Ç—ã–µ –∫–∞—Ä—Ç—ã:**\n"
                             f"{text_cards}")

    await message.edit(embed=embed)


async def commit_game_changes(message, data, guild):
    value_emoji = client.get_emoji(emoji["money"])
    embed = message.embeds[0]

    old_third_field_value = "\n".join(embed.fields[3].value.split("\n")[:4])
    embed.set_field_at(3, name="\u200b",
                       value=f"{old_third_field_value}\n"
                             f"{data['next_player_id']}.\t{data['next_player']}\n"
                             f"–•–æ–¥ —Ä–∞—É–Ω–¥–∞: {data['next_player_id']} –∏–∑ {data['max_player_id']}",
                       inline=True)

    embed.set_field_at(5, name="\u200b",
                       value=f"**–û–±—â–∏–π –∫—É—à:**\n"
                             f"{data['new_pot']} {value_emoji}\n\n"
                             f"**–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞:**\n"
                             f"{data['new_min_bet']} {value_emoji}")

    if "–≤—ã—à–µ–ª –∏–∑ –∏–≥—Ä—ã" in data["last_action"]:
        all_active_members = json.load(open("game_data/active_players.json", encoding="utf8"))
        members = [guild.get_member(member_id)
                   for member_id in list(all_active_members[str(message.id)].keys())]
        members_text = await get_formatted_players(members, guild.id, value_emoji)

        embed.set_field_at(0, name="\u200b", value="\n\n".join(members_text[0]), inline=True)
        embed.set_field_at(1, name="\u200b", value="\u200b", inline=True)
        embed.set_field_at(2, name="\u200b", value="\n\n".join(members_text[1]), inline=True)
    elif data["last_action"] != "":
        embed.set_field_at(7, name="\u200b",
                           value=f"**–ü–æ—Å–ª–µ–¥–Ω–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:**\n"
                                 f"{data['last_action']}")

    await message.edit(embed=embed)

    if not data["next_player"]:
        opened_cards = embed.fields[6].value.split("\n")[1:]
        round_num = len(opened_cards) if len(opened_cards) > 1 else len(opened_cards) + 1

        await start_new_round(round_num, message)


async def get_current_game_data(ctx):
    pins = await ctx.channel.pins()
    current_game_message = None
    for pin_message in pins:
        if pin_message.embeds and "–ü–∞—Ä—Ç–∏—è –≤ –ø–æ–∫–µ—Ä –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ" == pin_message.embeds[0].title:
            current_game_message = pin_message
            break

    if not current_game_message:
        print("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä")
        return

    current_game_data = {}

    embed = current_game_message.embeds[0]

    raw_bet_data = embed.fields[5].value.split("\n")
    round_info = embed.fields[3].value.split("\n")[5].split()

    current_player_line = embed.fields[3].value.split("\n")[4]
    current_player_name, current_player_desc = " ".join(current_player_line.split()[1:]).split("#")

    current_game_data["message"] = current_game_message

    current_game_data["pot"] = int(raw_bet_data[1].split()[0])
    current_game_data["min_bet"] = int(raw_bet_data[4].split()[0])

    current_game_data["current_player"] = get(ctx.guild.members,
                                              name=current_player_name,
                                              discriminator=current_player_desc)

    current_game_data["current_player_id"] = int(round_info[2])
    current_game_data["max_player_id"] = int(round_info[4])

    return current_game_data


"""
====================================================================================================================
===================================== –†–ê–ó–î–ï–õ –° –ü–†–û–ß–ò–ú–ò –ö–û–ú–ê–ù–î–ê–ú–ò –î–õ–Ø –ò–ì–†–û–ö–û–í =======================================
====================================================================================================================
"""


# –§–£–ù–ö–¶–ò–Ø, –¥–æ–±–∞–≤–ª—è—é—â–∞—è xp, lvl
async def add_level(guild, member_id, xp):
    user = db_sess.query(User).filter(User.id == f"{member_id}-{guild.id}").first()
    user.xp += xp
    need_xp = 50 * (user.level ^ 2) - (50 * user.level)
    if user.xp <= need_xp:
        user.xp = user.xp % need_xp
        user.level += 1
        user.skill_points += 1
    db_sess.commit()


# –§–£–ù–ö–¶–ò–Ø, –¥–µ–ª–∞—é—â–∞—è —á–∏—Å—Ç—ã–π id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def clean_member_id(member_id):
    try:
        return int(str(member_id).replace("<", "").replace(">", "").replace("!", "").replace("@", ""))
    except ValueError:
        return ""


# –ö–û–ú–ê–ù–î–ê, –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–≤—è–∑–∏ :)
@slash.slash(
    name="ping",
    description="–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∏!",
    guild_ids=test_servers_id
)
async def ping(ctx):
    await ctx.send('Pong!')


# –ö–û–ú–ê–ù–î–ê, –¥–æ–±–∞–≤–ª—è—é—â–∞—è –Ω–∏–∫ –∏ —Å–æ–∑–¥–∞—é—â–∞—è –ø—Ä–æ—Ñ–∏–ª—å
@client.command()
async def name(ctx, *args):
    await ctx.message.delete()
    guild = ctx.guild
    member = ctx.author

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ –Ω—É–∂–Ω–æ–º –ª–∏ —á–∞—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–∞
    name_channel = "üö™—Å–æ–∑–¥–∞–Ω–∏–µ-–ø–µ—Ä—Å–æ–Ω–∞–∂–∞"
    if ctx.channel.id != get(guild.channels, name=name_channel).id:
        await member.send(f":x: **–î–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ —á–∞—Ç–µ \"{name_channel}\".**")
        return
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ —Å–∞–º–æ–≥–æ –∏–º–µ–Ω–∏
    if not args:
        await member.send(f":x: **–í–≤–µ–¥–∏—Ç–µ –∏–º—è —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã, –∏–º—è –Ω–µ –º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å.**")
        return

    _name = ' '.join(map(lambda x: x.capitalize(), args))
    user = db_sess.query(User).filter(User.id == f"{member.id}-{guild.id}").first()

    if get(guild.roles, name="–ò–≥—Ä–æ–∫") not in member.roles:
        await member.send(':x: **–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å —Å–≤–æ—ë –∏–º—è!** *–î–ª—è —ç—Ç–æ–≥–æ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.*')
        return

    if user.nation == '-1' or user.origin == '-1':
        await member.send(':x: **–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –≤—ã–±—Ä–∞–≤ —Ä–∞—Å—É –∏ –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏–µ!**')
        return
    await member.send(':white_check_mark: **–í—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–ª–∏ —Å–≤–æ–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, —É–¥–∞—á–Ω–æ–π –∏–≥—Ä—ã!**')

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–º—è
    user.name = _name
    # –î–æ–±–∞–≤–ª—è–µ—Ç—Å—è —Ä–æ–ª—å @–ò–≥—Ä–æ–∫
    role = get(guild.roles, name="–ò–≥—Ä–æ–∫")
    await member.add_roles(role)
    # –ò–∑–º–µ–Ω—è–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞—Å—ã –∏ —Ä–æ–ª—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≥–æ—Ä–æ–¥–∞
    if user.nation == '–°–µ–≤–µ—Ä—è–Ω–µ':
        # —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        user.health += 2
        user.strength += 2
        user.intelligence -= 2
        user.dexterity -= 2
        # —Ä–æ–ª—å
        role = get(guild.roles, name="–¢–æ–ø–æ–ª–∏—Å")
    elif user.nation == '–¢–µ—Ö–Ω–æ-–≥–∏–∫–∏':
        # —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        user.intelligence += 3
        user.dexterity += 1
        user.health -= 1
        user.strength -= 3
        # —Ä–æ–ª—å
        role = get(guild.roles, name="–ë—Ä–∞–∏—Ñ–∞—Å—Ç")
    elif user.nation == '–Æ–∂–∞–Ω–µ':
        # —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        user.health += 1
        user.speed += 3
        user.intelligence -= 4
        # —Ä–æ–ª—å
        role = get(guild.roles, name="–î–∂–∞–¥–∏—Ñ—Ñ")
    await member.add_roles(role)
    # –ò–∑–º–µ–Ω—è–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è
    if user.origin == '–ë–æ–≥–∞—Ç–∞—è —Å–µ–º—å—è':
        # –¥–µ–Ω—å–≥–∏
        user.balance = 14000
        # —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        user.strength -= 2
        user.dexterity -= 2
    elif user.origin == '–û–±—ã—á–Ω–∞—è —Å–µ–º—å—è':
        # –¥–µ–Ω—å–≥–∏
        user.balance = 4500
        # —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    elif user.origin == '–ë–µ–¥–Ω–æ—Å—Ç—å':
        # –¥–µ–Ω—å–≥–∏
        user.balance = 500
        # —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        user.strength += 2
        user.dexterity += 2
        user.speed += 2
    # –ö–æ–º–∏—Ç
    db_sess.commit()


# –ö–û–ú–ê–ù–î–ê, –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –º–µ–∂–¥—É –≥–æ—Ä–æ–¥–∞–º–∏
@slash.slash(
    name="move",
    description="–û—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –≤ –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥!",
    options=[{"name": "city", "description": "–†–æ–ª—å –≥–æ—Ä–æ–¥–∞ –≤ –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–π—Ç–∏.", "type": 8, "required": True}],
    guild_ids=test_servers_id
)
@commands.has_role("–ò–≥—Ä–æ–∫")
async def move(ctx, city):
    guild = ctx.guild
    author = ctx.author

    if city.name not in ["–¢–æ–ø–æ–ª–∏—Å", "–ë—Ä–∞–∏—Ñ–∞—Å—Ç", "–î–∂–∞–¥–∏—Ñ—Ñ"]:
        raise IncorrectCityName(f"- {city.name} - –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –≥–æ—Ä–æ–¥–∞!")
    if city in author.roles:
        raise IncorrectCityName(f"- –í—ã –∏ —Ç–∞–∫ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ {city.name}!")

    user = db_sess.query(User).filter(User.id == f"{author.id}-{guild.id}").first()

    # –£–¥–∞–ª–µ–Ω–∏–µ —Ä–æ–ª–∏ –ø—Ä–æ—à–ª–æ–≥–æ –≥–æ—Ä–æ–¥–∞
    await author.remove_roles(get(guild.roles, name="–¢–æ–ø–æ–ª–∏—Å"))
    await author.remove_roles(get(guild.roles, name="–ë—Ä–∞–∏—Ñ–∞—Å—Ç"))
    await author.remove_roles(get(guild.roles, name="–î–∂–∞–¥–∏—Ñ—Ñ"))
    time_second = 8 * (60 - int(user.speed))
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    await ctx.send(f"**{author.mention} –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è –≤ –≥–æ—Ä–æ–¥ {city.name}.**")
    await author.send(f":white_check_mark: **–í—Ä–µ–º—è –∫–æ—Ç–æ—Ä–æ–µ –∑–∞—Ç—Ä–∞—Ç–∏—Ç—å—Å—è –Ω–∞ –¥–æ—Ä–æ–≥—É: {str(time_second / 60)[0]} "
                      f"–º–∏–Ω—É—Ç {time_second % 60} —Å–µ–∫—É–Ω–¥.**")
    # –¢–∞–π–º–µ—Ä
    await asyncio.sleep(time_second)
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª–∏ –Ω–æ–≤–æ–≥–æ –≥–æ—Ä–æ–¥–∞
    await author.add_roles(city)
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    await get(guild.channels, name=f"—Ç–∞–≤–µ—Ä–Ω–∞-{city.name[0].lower()}").send(f"{author.mention} *–ø—Ä–∏–±—ã–ª!*")
    await author.send(f":white_check_mark: **–° –ø—Ä–∏–±—ã—Ç–∏–µ–º –≤ {city.name}.**")


# –ö–û–ú–ê–ù–î–ê, –¥–ª—è –≤–ª–∏–≤–∞–Ω–∏—è —Å–∫–∏–ª–ª –ø–æ–∏–Ω—Ç–æ–≤ –≤ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
@slash.slash(
    name="profile",
    description="–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∞—à–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏, —Å–∫–æ–ª—å–∫–æ —É –≤–∞—Å —Å–≤–æ–±–æ–¥–Ω—ã—Ö –æ—á–∫–æ–≤ –Ω–∞–≤—ã–∫–∞ –∏ –ø—Ä–æ—á—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.",
    guild_ids=test_servers_id
)
@commands.has_role("–ò–≥—Ä–æ–∫")
async def profile(ctx):
    guild = ctx.guild
    author = ctx.author
    user = db_sess.query(User).filter(User.id == f"{author.id}-{guild.id}").first()
    # ======= –ü–†–û–§–ò–õ–¨
    embed = discord.Embed(title=f"‚ÆÆ __**{user.name}:**__", color=4017407)

    embed.add_field(name='**–ë–∞–ª–∞–Ω—Å:**', value=f"*```md\n# {user.balance} Gaudium```*", inline=False)
    text1 = f"*```md\n" \
            f"# –†–∞—Å–∞ ‚û¢ {user.nation}\n" \
            f"# –ü—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏–µ ‚û¢ {user.origin}```*"
    embed.add_field(name='**–°–≤–µ–¥–µ–Ω–∏—è:**', value=text1, inline=False)
    text2 = f"*```md\n" \
            f"# –ó–¥–æ—Ä–æ–≤—å–µ ‚û¢ {user.health}\n" \
            f"# –°–∏–ª–∞ ‚û¢ {user.strength}\n"\
            f"# –ò–Ω—Ç–µ–ª–µ–∫—Ç ‚û¢ {user.intelligence}\n" \
            f"# –ú–∞—Ç–æ—Ä–∏–∫–∞ ‚û¢ {user.dexterity}\n" \
            f"# –°–∫–æ—Ä–æ—Å—Ç—å ‚û¢ {user.speed}```*"
    embed.add_field(name='**–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:**', value=text2, inline=False)
    embed.add_field(name='**–°–≤–æ–±–æ–¥–Ω—ã—Ö –æ—á–∫–æ–≤ –Ω–∞–≤—ã–∫–∞:**', value=f"*```md\n# {user.skill_points}```*", inline=False)

    embed.set_thumbnail(url=author.avatar_url)
    embed.set_footer(text=f"–ù–∏–∫–Ω–µ–π–º Discord: {author.name}")

    await ctx.send(embed=embed)


"""
====================================================================================================================
========================================== –†–ê–ó–î–ï–õ –° –û–ë–†–ê–ë–û–¢–ß–ò–ö–ê–ú–ò –û–®–ò–ë–û–ö ===========================================
====================================================================================================================
"""


@all_in.error
async def all_in_error(ctx, error):
    await throw_error(ctx, error)


@_bet.error
async def bet_error(ctx, error):
    await throw_error(ctx, error)


@call.error
async def call_error(ctx, error):
    await throw_error(ctx, error)


# @fold.error
# async def fold_error(ctx, error):
#     await throw_error(ctx, error)


@reraise.error
async def reraise_error(ctx, error):
    await throw_error(ctx, error)


@_raise.error
async def _raise_error(ctx, error):
    await throw_error(ctx, error)


@check.error
async def check_error(ctx, error):
    await throw_error(ctx, error)


@send_invite_tic_tac_toe.error
async def send_invite_tic_tac_toe_error(ctx, error):
    await throw_error(ctx, error)


@start_poker_session.error
async def start_poker_session_error(ctx, error):
    await throw_error(ctx, error)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ —Ñ—É–Ω–∫—Ü–∏–∏ move
@move.error
async def move_error(ctx, error):
    await throw_error(ctx, error)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ —Ñ—É–Ω–∫—Ü–∏–∏ trade
@trade.error
async def trade_error(ctx, error):
    await throw_error(ctx, error)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ —Ñ—É–Ω–∫—Ü–∏–∏ money_transfer
@money_transfer.error
async def money_transfer_error(ctx, error):
    await throw_error(ctx, error)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ —Ñ—É–Ω–∫—Ü–∏–∏ implement
@implement.error
async def implementation_error(ctx, error):
    await ctx.message.delete()
    await throw_error(ctx, error)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ —Ñ—É–Ω–∫—Ü–∏–∏ reset
@reset.error
async def reset_error(ctx, error):
    await ctx.message.delete()
    await throw_error(ctx, error)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ —Ñ—É–Ω–∫—Ü–∏–∏ open_inventory
@open_inventory.error
async def inventory_error(ctx, error):
    await throw_error(ctx, error)


async def throw_error(ctx, error):
    text = error

    if isinstance(error, MissingRole):
        text = f"- –£ –≤–∞—Å –Ω–µ—Ç —Ä–æ–ª–∏ \"–ò–≥—Ä–æ–∫\" –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã."
    if isinstance(error, MissingPermissions):
        text = "- –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã. (–ö–∞–∫ –∏—Ä–æ–Ω–∏—á–Ω–æ)"
    if isinstance(error, CommandNotFound):
        text = "- –ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞! –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–∞–∂–∞—Ç—å \"/\""

    embed = discord.Embed(title="‚ÆÆ __**–ë–û–¢ –°–¢–û–õ–ö–ù–£–õ–°–Ø –° –û–®–ò–ë–ö–û–ô:**__", color=0xed4337)
    embed.add_field(name="**–ü—Ä–∏—á–∏–Ω–∞:**",
                    value=f"```diff\n{text}\n```",
                    inline=False)
    await ctx.send(embed=embed)


"""
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- –ó–ê–ü–£–°–ö –ë–û–¢–ê -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
"""

DiscordComponents(client)
client.run(TOKEN)
